!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ANSI_BLACK	base/ansi_colors.h	67;"	d
ANSI_BLUE	base/ansi_colors.h	75;"	d
ANSI_BOLD	base/ansi_colors.h	47;"	d
ANSI_CLEAR	base/ansi_colors.h	45;"	d
ANSI_CYAN	base/ansi_colors.h	79;"	d
ANSI_GREEN	base/ansi_colors.h	71;"	d
ANSI_HBLACK	base/ansi_colors.h	50;"	d
ANSI_HBLUE	base/ansi_colors.h	58;"	d
ANSI_HCYAN	base/ansi_colors.h	62;"	d
ANSI_HGREEN	base/ansi_colors.h	54;"	d
ANSI_HMAGENTA	base/ansi_colors.h	60;"	d
ANSI_HRED	base/ansi_colors.h	52;"	d
ANSI_HWHITE	base/ansi_colors.h	64;"	d
ANSI_HYELLOW	base/ansi_colors.h	56;"	d
ANSI_MAGENTA	base/ansi_colors.h	77;"	d
ANSI_RED	base/ansi_colors.h	69;"	d
ANSI_SEQ	base/ansi_colors.h	43;"	d
ANSI_WHITE	base/ansi_colors.h	81;"	d
ANSI_YELLOW	base/ansi_colors.h	73;"	d
ARRAYLIST__DEBUG_INIT_OK	col/arraylist.h	1211;"	d
ARRAYLIST__DEBUG_INIT_OK	col/arraylist.h	44;"	d
ARRAYLIST__DEBUG_INSERT_OK	col/arraylist.h	1208;"	d
ARRAYLIST__DEBUG_INSERT_OK	col/arraylist.h	57;"	d
ARRAYLIST__DEBUG_POP_BACK_OK	col/arraylist.h	1209;"	d
ARRAYLIST__DEBUG_POP_BACK_OK	col/arraylist.h	53;"	d
ARRAYLIST__DEBUG_PUSH_BACK_OK	col/arraylist.h	1210;"	d
ARRAYLIST__DEBUG_PUSH_BACK_OK	col/arraylist.h	49;"	d
ARRAYLIST__DEBUG_REMOVE_OK	col/arraylist.h	1207;"	d
ARRAYLIST__DEBUG_REMOVE_OK	col/arraylist.h	62;"	d
ASSERT_PASS	base/deprecated.h	49;"	d
ASSIGN_VIA_COPY_CONSTRUCTION	base/cc.h	99;"	d
ASSIGN_VIA_RECURSION_SAFE_COPY_CONSTRUCTION	base/cc.h	121;"	d
ATTACHED	par/thread.h	/^  enum {UNINIT, READY, ATTACHED, DETACHED, DONE} status_;$/;"	e	enum:Thread::__anon18
Add	col/queue.h	/^  T *Add() {$/;"	f	class:Queue
Add	col/queue.h	/^  T *Add(const T& value) {$/;"	f	class:Queue
Add	tree/bounds.h	/^ DHrectBound& Add(const DHrectBound& other, const Vector& size){$/;"	f	class:DHrectBound
Add	tree/bounds.h	/^ DHrectBound& Add(const Vector&  other, const Vector& size){$/;"	f	class:DHrectBound
AddBack	col/arraylist.h	/^  Elem *AddBack(index_t inc = 1) {$/;"	f	class:ArrayList
AddBackItem	col/arraylist.h	/^  Elem *AddBackItem(const Elem &elem) {$/;"	f	class:ArrayList
AddBackUnconstructed	col/arraylist.h	/^  Elem *AddBackUnconstructed(index_t inc = 1) {$/;"	f	class:ArrayList
AddExpert	la/uselapack.h	/^  inline void AddExpert(double alpha, const Matrix &X, Matrix *Y) {$/;"	f	namespace:la
AddExpert	la/uselapack.h	/^  inline void AddExpert(double alpha, const Vector &x, Vector *y) {$/;"	f	namespace:la
AddExpert	la/uselapack.h	/^  inline void AddExpert(index_t length,$/;"	f	namespace:la
AddInit	la/uselapack.h	/^  inline void AddInit(const Matrix &X, const Matrix &Y, Matrix *Z) {$/;"	f	namespace:la
AddInit	la/uselapack.h	/^  inline void AddInit(const Vector &x, const Vector &y, Vector *z) {$/;"	f	namespace:la
AddOverwrite	la/uselapack.h	/^  inline void AddOverwrite(const Matrix &X, const Matrix &Y, Matrix *Z) {$/;"	f	namespace:la
AddOverwrite	la/uselapack.h	/^  inline void AddOverwrite(const Vector &x, const Vector &y, Vector *z) {$/;"	f	namespace:la
AddOverwrite	la/uselapack.h	/^  inline void AddOverwrite(index_t length,$/;"	f	namespace:la
AddTo	la/uselapack.h	/^  inline void AddTo(const Matrix &X, Matrix *Y) {$/;"	f	namespace:la
AddTo	la/uselapack.h	/^  inline void AddTo(const Vector &x, Vector *y) {$/;"	f	namespace:la
AddTo	la/uselapack.h	/^  inline void AddTo(index_t length, const double *x, double *y) {$/;"	f	namespace:la
Alias	la/matrix.h	/^  void Alias(T *in_ptr, index_t in_length) {$/;"	f	class:GenVector
Alias	la/matrix.h	/^  void Alias(T *ptr_in, index_t n_rows_in, index_t n_cols_in) {$/;"	f	class:GenMatrix
Alias	la/matrix.h	/^  void Alias(const GenMatrix& other) {$/;"	f	class:GenMatrix
Alias	la/matrix.h	/^  void Alias(const GenVector& other) {$/;"	f	class:GenVector
AliasColVector	la/matrix.h	/^  void AliasColVector(const GenVector<T>& col_vector) {$/;"	f	class:GenMatrix
AliasMatrix	data/dataset.h	/^  void AliasMatrix(const Matrix& matrix_in) {$/;"	f	class:Dataset
AliasRowVector	la/matrix.h	/^  void AliasRowVector(const GenVector<T>& row_vector) {$/;"	f	class:GenMatrix
Aliaser	base/otrav_impl.h	/^    Aliaser(T *obj) {$/;"	f	class:ot__private::Aliaser
Aliaser	base/otrav_impl.h	/^  class Aliaser {$/;"	c	namespace:ot__private
Alloc	base/ccmem.h	/^  inline T *Alloc() {$/;"	f	namespace:mem
Alloc	base/ccmem.h	/^  inline T *Alloc(size_t elems) {$/;"	f	namespace:mem
Alloc	col/fastalloc.h	/^  static char *Alloc() {$/;"	f	class:SlabAllocator
AllocBytes	base/ccmem.h	/^  inline T *AllocBytes(size_t bytes) {$/;"	f	namespace:mem
AllocConstruct	base/ccmem.h	/^  inline T *AllocConstruct(size_t elems = 1) {$/;"	f	namespace:mem
AllocConstruct	base/deprecated.h	/^  inline T *AllocConstruct(const U &init, size_t elems) {$/;"	f	namespace:mem
AllocCopy	base/ccmem.h	/^  inline T *AllocCopy(const T *src, size_t elems = 1) {$/;"	f	namespace:mem
AllocCopy	base/ccmem.h	/^  inline T *AllocCopy(const U *src, size_t elems = 1) {$/;"	f	namespace:mem
AllocCopyBytes	base/ccmem.h	/^  inline T *AllocCopyBytes(const U *src, size_t bytes) {$/;"	f	namespace:mem
AllocCopyConstruct	base/ccmem.h	/^  inline T *AllocCopyConstruct(const T *src, size_t elems = 1) {$/;"	f	namespace:mem
AllocCopyConstruct	base/ccmem.h	/^  inline T *AllocCopyConstruct(const U *src, size_t elems = 1) {$/;"	f	namespace:mem
AllocCopyValues	base/ccmem.h	/^  inline T *AllocCopyValues(const U *src, size_t elems = 1) {$/;"	f	namespace:mem
AllocRepeatConstruct	base/ccmem.h	/^  inline T *AllocRepeatConstruct(const T &init, size_t elems) {$/;"	f	namespace:mem
AllocRepeatConstruct	base/ccmem.h	/^  inline T *AllocRepeatConstruct(const U &init, size_t elems) {$/;"	f	namespace:mem
AllocSlab	col/fastalloc.h	/^void SlabAllocator<item_size>::AllocSlab() {$/;"	f	class:SlabAllocator
AllocZero	base/ccmem.h	/^  inline T *AllocZero(size_t elems = 1) {$/;"	f	namespace:mem
AllocZeroBytes	base/ccmem.h	/^  inline T *AllocZeroBytes(size_t bytes) {$/;"	f	namespace:mem
AllocZeroed	base/deprecated.h	/^  inline T *AllocZeroed(size_t elems = 1) {$/;"	f	namespace:mem
Append	col/col_string.h	/^  void Append(char c) {$/;"	f	class:String
Append	col/col_string.h	/^  void Append(const String& str) {$/;"	f	class:String
Append	col/col_string.h	/^  void Append(const char *add_str) {$/;"	f	class:String
Append	col/col_string.h	/^  void Append(const char *add_str, index_t add_length) {$/;"	f	class:String
AppendCopy	col/arraylist.h	/^  void AppendCopy(const ArrayList &src) {$/;"	f	class:ArrayList
AppendCopy	col/arraylist.h	/^  void AppendCopy(const Elem *src, index_t size) {$/;"	f	class:ArrayList
AppendSteal	col/arraylist.h	/^void ArrayList<TElem>::AppendSteal(ArrayList *src) {$/;"	f	class:ArrayList
ArrayList	col/arraylist.h	/^class ArrayList {$/;"	c
AssertApproxMatrix	la/uselapack_test.cc	/^void AssertApproxMatrix(const Matrix& a, const Matrix& b,$/;"	f
AssertApproxTransMatrix	la/uselapack_test.cc	/^void AssertApproxTransMatrix(const Matrix& a, const Matrix& b,$/;"	f
AssertApproxVector	la/uselapack_test.cc	/^void AssertApproxVector(const Vector& a, const Vector& b, double eps) {$/;"	f
AssertExactMatrix	la/uselapack_test.cc	/^void AssertExactMatrix(const Matrix& a, const Matrix& b) {$/;"	f
AssertInitialized_	la/matrix.h	/^  void AssertInitialized_() {$/;"	f	class:GenVector
AssertProperSVD	la/uselapack_test.cc	/^void AssertProperSVD(const Matrix& orig,$/;"	f
AssertSameMatrix	data/dataset_test.cc	/^void AssertSameMatrix(const Matrix& a, const Matrix& b) {$/;"	f
AssertUninitialized_	la/matrix.h	/^  void AssertUninitialized_() const {$/;"	f	class:GenMatrix
AssertUninitialized_	la/matrix.h	/^  void AssertUninitialized_() const {$/;"	f	class:GenVector
AverageBoxesInit	tree/bounds.h	/^  void AverageBoxesInit(const DHrectBound& box1, const DHrectBound& box2) {$/;"	f	class:DHrectBound
BASE_ANSI_COLORS_H	base/ansi_colors.h	40;"	d
BASE_CCMEM_H	base/ccmem.h	43;"	d
BASE_CCMEM__SIMPLE_CONSTRUCTORS	base/ccmem.h	368;"	d
BASE_CCMEM__SIMPLE_CONSTRUCTORS	base/ccmem.h	413;"	d
BASE_CC_H	base/cc.h	39;"	d
BASE_COMMON_H	base/common.h	49;"	d
BASE_COMPILER_H	base/compiler.h	42;"	d
BASE_DEBUG_H	base/debug.h	51;"	d
BASE_DEPRECATED_H	base/deprecated.h	40;"	d
BASE_FORTRAN_H	base/fortran.h	40;"	d
BASE_H	base/base.h	46;"	d
BASE_OTRAV_H	base/otrav.h	43;"	d
BASE_TEST_H	base/test.h	42;"	d
BIG_BAD_BUF	base/ccmem.cc	/^const int32 mem__private::BIG_BAD_BUF[] = {$/;"	m	class:mem__private	file:
BIG_BAD_BUF_SIZE	base/ccmem.h	/^  const size_t BIG_BAD_BUF_SIZE = 64;$/;"	v
BIG_BAD_NUMBER	base/debug.h	250;"	d
BIG_BAD_POINTER	base/debug.h	262;"	d
BasicKdTree	tree/kdtree.h	/^typedef BinarySpaceTree<DHrectBound<2>, Matrix> BasicKdTree;$/;"	t
BinarySpaceTree	tree/spacetree.h	/^class BinarySpaceTree {$/;"	c
BinomialCoefficient	math/discrete.cc	/^double math::BinomialCoefficient(int n, int k) {$/;"	f	class:math
BitCopy	base/ccmem.h	/^  T *BitCopy(T *dest, const T *src, size_t elems = 1) {$/;"	f	namespace:mem
BitCopyBytes	base/ccmem.h	/^  T *BitCopyBytes(T *dest, const U *src, size_t bytes) {$/;"	f	namespace:mem
BitSwap	base/ccmem.h	/^  void BitSwap(T *a, T *b, size_t elems = 1) {$/;"	f	namespace:mem
BitZero	base/ccmem.h	/^  T *BitZero(T *array, size_t elems = 1) {$/;"	f	namespace:mem
BitZeroBytes	base/ccmem.h	/^  T *BitZeroBytes(T *array, size_t bytes) {$/;"	f	namespace:mem
Bound	tree/spacetree.h	/^  typedef TBound Bound;$/;"	t	class:BinarySpaceTree
Boundary	col/rangeset.h	/^  typedef TBoundary Boundary;$/;"	t	class:RangeSet
Broadcast	par/thread.h	/^  void Broadcast() {$/;"	f	class:WaitCondition
CC_ASSIGNMENT_OPERATOR	base/deprecated.h	68;"	d
COLLECTIONS_HEAP_H	col/heap.h	41;"	d
COLLECTIONS_STRING_H	col/col_string.h	41;"	d
COL_ARRAYLIST_H	col/arraylist.h	40;"	d
COL_FASTALLOC_H	col/fastalloc.h	41;"	d
COL_INTMAP_H	col/intmap.h	39;"	d
COL_QUEUE_H	col/queue.h	39;"	d
COL_RANGESET_H	col/rangeset.h	39;"	d
COMMA	base/common.h	76;"	d
COMPILER_CAST	base/compiler.h	319;"	d
COMPILER_CAST	base/compiler.h	321;"	d
COMPILER_DEPRECATED	base/compiler.h	226;"	d
COMPILER_DEPRECATED	base/compiler.h	228;"	d
COMPILER_DEPRECATED_MSG	base/compiler.h	244;"	d
COMPILER_DEPRECATED_MSG	base/compiler.h	246;"	d
COMPILER_FUNCTIONAL	base/compiler.h	201;"	d
COMPILER_FUNCTIONAL	base/compiler.h	203;"	d
COMPILER_NOINLINE	base/deprecated.h	56;"	d
COMPILER_NORETURN	base/deprecated.h	55;"	d
COMPILER_NO_INLINE	base/compiler.h	212;"	d
COMPILER_NO_INLINE	base/compiler.h	214;"	d
COMPILER_NO_RETURN	base/compiler.h	153;"	d
COMPILER_NO_RETURN	base/compiler.h	155;"	d
COMPILER_PRINTF	base/compiler.h	177;"	d
COMPILER_PRINTF	base/compiler.h	180;"	d
CONST_REF	base/compiler.h	342;"	d
CONST_REF	base/compiler.h	344;"	d
CONTINUOUS	data/dataset.h	/^      CONTINUOUS,$/;"	e	enum:DatasetFeature::Type
CalcMultiplicativeNormConstant	math/kernel.h	/^  double CalcMultiplicativeNormConstant(index_t dims) const {$/;"	f	class:GaussianStarKernel
CalcNormConstant	math/kernel.h	/^  double CalcNormConstant(index_t dims) const {$/;"	f	class:EpanKernel
CalcNormConstant	math/kernel.h	/^  double CalcNormConstant(index_t dims) const {$/;"	f	class:GaussianKernel
CalcNormConstant	math/kernel.h	/^  double CalcNormConstant(index_t dims) const {$/;"	f	class:GaussianStarKernel
Calculate	math/math_lib_impl.h	/^    static double Calculate(double d) {$/;"	f	struct:math__private::ZPowAbsImpl
Calculate	math/math_lib_impl.h	/^    static double Calculate(double d) {$/;"	f	struct:math__private::ZPowImpl
CalculateMaxDistanceSq	tree/bounds.h	/^  double CalculateMaxDistanceSq() const {$/;"	f	class:DHrectBound
CalculateMidpoint	tree/bounds.h	/^  void CalculateMidpoint(Point *centroid) const {$/;"	f	class:DBallBound
CalculateMidpoint	tree/bounds.h	/^  void CalculateMidpoint(Vector *centroid) const {$/;"	f	class:DHrectBound
CalculateMidpointOverwrite	tree/bounds.h	/^  void CalculateMidpointOverwrite(Vector *centroid) const {$/;"	f	class:DHrectBound
ChildIndex_	col/heap.h	/^  static index_t ChildIndex_(index_t i) {$/;"	f	class:MinHeap
Cholesky	la/uselapack.cc	/^success_t la::Cholesky(Matrix *A_in_U_out) {$/;"	f	class:la
CholeskyInit	la/uselapack.h	/^  inline success_t CholeskyInit(const Matrix &A, Matrix *U) {$/;"	f	namespace:la
ClampNonNegative	math/math_lib.h	/^  inline double ClampNonNegative(double d) {$/;"	f	namespace:math
ClampNonPositive	math/math_lib.h	/^  inline double ClampNonPositive(double d) {$/;"	f	namespace:math
ClampRange	math/math_lib.h	/^  inline double ClampRange(double value, double range_min, double range_max) {$/;"	f	namespace:math
Classifier	data/crossvalidation.h	/^  typedef TClassifier Classifier;$/;"	t	class:SimpleCrossValidator
Clear	col/arraylist.h	/^  void Clear() {$/;"	f	class:ArrayList
Clear	col/queue.h	/^  void Clear() {$/;"	f	class:Queue
Close	base/otrav.cc	/^void ot::StandardFormat::Close(const char *name, const char *type) {$/;"	f	class:ot::StandardFormat
Close	base/otrav.cc	/^void ot::XMLFormat::Close(const char *name, const char *type) {$/;"	f	class:ot::XMLFormat
Close	file/textfile.h	/^  success_t Close() {$/;"	f	class:TextWriter
Close	file/textfile.h	/^  void Close() {$/;"	f	class:TextLineReader
CompareNoCase	col/col_string.h	/^  int CompareNoCase(const char *s) const {$/;"	f	class:String
CompareTo	col/col_string.h	/^  int CompareTo(const String& other) const$/;"	f	class:String
CompareTo	col/col_string.h	/^  int CompareTo(const char* s) const$/;"	f	class:String
Construct	base/ccmem.h	/^  inline T **Construct(T **array, size_t elems = 1) {$/;"	f	namespace:mem
Construct	base/ccmem.h	/^  inline T *Construct(T *array, size_t elems) {$/;"	f	namespace:mem
Construct	base/ccmem.h	/^  inline T *Construct(T *ptr) {$/;"	f	namespace:mem
Construct	base/deprecated.h	/^  inline T *Construct(T *ptr, const U &init) {$/;"	f	namespace:mem
Construct	base/otrav.h	/^  inline T *Construct(T *array, size_t elems = 1) {$/;"	f	namespace:ot
ConstructAll	base/deprecated.h	/^  inline T *ConstructAll(T *array, const U &init, size_t elems) {$/;"	f	namespace:mem
ConstructAll	base/deprecated.h	/^  inline T *ConstructAll(T *array, size_t elems) {$/;"	f	namespace:mem
Contains	math/math_lib.h	/^  bool Contains(double d) const {$/;"	f	struct:DRange
Contains	tree/bounds.h	/^  bool Contains(const Point& point) const {$/;"	f	class:DBallBound
Contains	tree/bounds.h	/^  bool Contains(const Vector& point) const {$/;"	f	class:DHrectBound
Contains	tree/bounds.h	/^  bool Contains(const Vector& point, const Vector& box) const {$/;"	f	class:DHrectBound
Context	par/grain.h	/^  typedef TContext Context;$/;"	t	class:ThreadedGrainRunner
Copier	base/otrav_impl.h	/^    Copier(T *dest, const T *src) {$/;"	f	class:ot__private::Copier
Copier	base/otrav_impl.h	/^    Copier(T *dest, const T *src, index_t len) {$/;"	f	class:ot__private::Copier
Copier	base/otrav_impl.h	/^  class Copier {$/;"	c	namespace:ot__private
Copy	base/ccmem.h	/^  inline T *Copy(T *dest, const T *src, size_t elems = 1) {$/;"	f	namespace:mem
Copy	base/ccmem.h	/^  inline T *Copy(T *dest, const U *src, size_t elems = 1) {$/;"	f	namespace:mem
Copy	base/deprecated.h	/^  inline T *Copy(T *dest, const U *src, size_t elems = 1) {$/;"	f	namespace:mem
Copy	base/otrav.h	/^  void Copy(const T &src, T *dest) {$/;"	f	namespace:ot
Copy	col/arraylist.h	/^  void Copy(const Elem *src, index_t size) {$/;"	f	class:ArrayList
Copy	col/col_string.h	/^  void Copy(const char *str) {$/;"	f	class:String
Copy	col/col_string.h	/^  void Copy(const char *str_region_begin, index_t len) {$/;"	f	class:String
Copy	la/matrix.h	/^  void Copy(const GenMatrix& other) {$/;"	f	class:GenMatrix
Copy	la/matrix.h	/^  void Copy(const GenVector& other) {$/;"	f	class:GenVector
Copy	la/matrix.h	/^  void Copy(const T *doubles, index_t in_length) {$/;"	f	class:GenVector
Copy	la/matrix.h	/^  void Copy(const T *ptr_in, index_t n_rows_in, index_t n_cols_in) {$/;"	f	class:GenMatrix
CopyBytes	base/ccmem.h	/^  inline T *CopyBytes(T *dest, const U *src, size_t bytes) {$/;"	f	namespace:mem
CopyBytes	base/deprecated.h	/^  inline T *CopyBytes(T *dest, const U *src, size_t bytes) {$/;"	f	namespace:mem
CopyColumnFromMat	la/matrix.h	/^   void CopyColumnFromMat(index_t col1, index_t col2, GenMatrix<T> &mat) {$/;"	f	class:GenMatrix
CopyColumnFromMat	la/matrix.h	/^   void CopyColumnFromMat(index_t col1, index_t col2, index_t ncols, GenMatrix<T> &mat) {$/;"	f	class:GenMatrix
CopyConstruct	base/ccmem.h	/^  inline T **CopyConstruct(T **dest, const T **src, size_t elems = 1) {$/;"	f	namespace:mem
CopyConstruct	base/ccmem.h	/^  inline T *CopyConstruct(T *dest, const U *src) {$/;"	f	namespace:mem
CopyConstruct	base/ccmem.h	/^  inline T *CopyConstruct(T *dest, const U *src, size_t elems) {$/;"	f	namespace:mem
CopyConstruct	base/otrav.h	/^  inline T *CopyConstruct(T *dest, const T *src, size_t elems = 1) {$/;"	f	namespace:ot
CopyMatrix	data/dataset.h	/^  void CopyMatrix(const Matrix& matrix_in) {$/;"	f	class:Dataset
CopyValues	base/ccmem.h	/^  inline T* \/*inline*\/ CopyValues(T *dest, const U *src, size_t elems=1) {$/;"	f	namespace:mem
CopyValues	la/matrix.h	/^  void CopyValues(const GenMatrix& other) {$/;"	f	class:GenMatrix
CopyValues	la/matrix.h	/^  void CopyValues(const GenVector& other) {$/;"	f	class:GenVector
CopyValues	la/matrix.h	/^  void CopyValues(const T *src_ptr) {$/;"	f	class:GenVector
CopyVectorToColumn	la/matrix.h	/^   void CopyVectorToColumn(index_t col, GenVector<T> &vec) {$/;"	f	class:GenMatrix
Current	file/textfile.h	/^  const String& Current() const {$/;"	f	class:TextTokenizer
CurrentType	file/textfile.h	/^  TokenType CurrentType() const {$/;"	f	class:TextTokenizer
DATA_CROSSVALIDATION	data/crossvalidation.h	39;"	d
DATA_DATASET_H	data/dataset.h	39;"	d
DBL_INF	base/cc.cc	/^const double DBL_INF = std::numeric_limits<double>::infinity();$/;"	v
DBL_NAN	base/cc.cc	/^const double DBL_NAN = std::numeric_limits<double>::quiet_NaN();$/;"	v
DBallBound	tree/bounds.h	/^class DBallBound {$/;"	c
DEBUG_APPROX_DOUBLE	base/debug.h	392;"	d
DEBUG_ASSERT	base/debug.h	240;"	d
DEBUG_ASSERT_MSG	base/debug.h	226;"	d
DEBUG_BOUNDS	base/debug.h	303;"	d
DEBUG_BOUNDS_INCLUSIVE	base/debug.h	320;"	d
DEBUG_DESTRUCT_OK	base/otrav.h	1090;"	d
DEBUG_ERROR_IF	base/debug.h	211;"	d
DEBUG_ERROR_MSG_IF	base/debug.h	196;"	d
DEBUG_ERR_IF	base/debug.h	213;"	d
DEBUG_ERR_MSG_IF	base/debug.h	199;"	d
DEBUG_GOT_HERE	base/deprecated.h	62;"	d
DEBUG_INIT_OK	base/otrav.h	978;"	d
DEBUG_MATSIZE	la/uselapack.h	47;"	d
DEBUG_MATSQUARE	la/uselapack.h	50;"	d
DEBUG_MODIFY_OK	base/otrav.h	1037;"	d
DEBUG_MSG	base/deprecated.h	60;"	d
DEBUG_ONLY	base/debug.h	71;"	d
DEBUG_ONLY	base/debug.h	73;"	d
DEBUG_POISON_PTR	base/debug.h	284;"	d
DEBUG_SAME_DOUBLE	base/debug.h	374;"	d
DEBUG_SAME_INT	base/debug.h	337;"	d
DEBUG_SAME_SIZE	base/debug.h	357;"	d
DEBUG_VECSIZE	la/uselapack.h	45;"	d
DEBUG_WARNING_IF	base/debug.h	181;"	d
DEBUG_WARNING_MSG_IF	base/debug.h	162;"	d
DEBUG_WARN_IF	base/debug.h	183;"	d
DEBUG_WARN_MSG_IF	base/debug.h	165;"	d
DEFINE_ALL_COMPARATORS	base/deprecated.h	70;"	d
DEFINE_ALL_COMPARATORS_HETERO	base/deprecated.h	73;"	d
DEFINE_INEQUALITY_COMPARATORS	base/deprecated.h	69;"	d
DEFINE_INEQUALITY_COMPARATORS_HETERO	base/deprecated.h	71;"	d
DETACHED	par/thread.h	/^  enum {UNINIT, READY, ATTACHED, DETACHED, DONE} status_;$/;"	e	enum:Thread::__anon18
DHrectBound	tree/bounds.h	/^class DHrectBound {$/;"	c
DONE	par/thread.h	/^  enum {UNINIT, READY, ATTACHED, DETACHED, DONE} status_;$/;"	e	enum:Thread::__anon18
DOUBLE	file/textfile.h	/^    DOUBLE,$/;"	e	enum:TextTokenizer::TokenType
DRange	math/math_lib.h	/^  DRange(double lo_in, double hi_in)$/;"	f	struct:DRange
DRange	math/math_lib.h	/^struct DRange {$/;"	s
Dataset	data/dataset.h	/^class Dataset {$/;"	c
Dataset	tree/spacetree.h	/^  typedef TDataset Dataset;$/;"	t	class:BinarySpaceTree
DatasetFeature	data/dataset.h	/^class DatasetFeature {$/;"	c
DatasetInfo	data/dataset.h	/^class DatasetInfo {$/;"	c
DebugPoison	base/ccmem.h	/^  inline T *DebugPoison(T *array, size_t elems) {$/;"	f	namespace:mem
DebugPoison	base/ccmem.h	/^  inline T *DebugPoison(T *ptr) {$/;"	f	namespace:mem
DebugPoisonBytes	base/ccmem.h	/^  inline T *DebugPoisonBytes(T *array, size_t bytes) {$/;"	f	namespace:mem
DenseIntMap	col/intmap.h	/^class DenseIntMap {$/;"	c
Deserializer	base/otrav_impl.h	/^    Deserializer(T &obj, FILE *stream) {$/;"	f	class:ot__private::Deserializer
Deserializer	base/otrav_impl.h	/^  class Deserializer {$/;"	c	namespace:ot__private
Destruct	base/ccmem.h	/^  inline T **Destruct(T **array, size_t elems = 1) {$/;"	f	namespace:mem
Destruct	base/ccmem.h	/^  inline T *Destruct(T *array, size_t elems) {$/;"	f	namespace:mem
Destruct	base/ccmem.h	/^  inline T *Destruct(T *ptr) {$/;"	f	namespace:mem
Destruct	base/otrav.h	/^  inline T *Destruct(T *array, size_t elems = 1) {$/;"	f	namespace:ot
Destruct	col/arraylist.h	/^  void Destruct() {$/;"	f	class:ArrayList
Destruct	col/col_string.h	/^  void Destruct() {$/;"	f	class:String
Destruct	la/matrix.h	/^  void Destruct() {$/;"	f	class:GenMatrix
Destruct	la/matrix.h	/^  void Destruct() {$/;"	f	class:GenVector
DestructAll	base/deprecated.h	/^  inline T *DestructAll(T *array, size_t elems) {$/;"	f	namespace:mem
Destructor	base/otrav_impl.h	/^    Destructor(T *obj) {$/;"	f	class:ot__private::Destructor
Destructor	base/otrav_impl.h	/^  class Destructor {$/;"	c	namespace:ot__private
Detach	par/thread.h	/^  void Detach() {$/;"	f	class:Thread
Determinant	la/uselapack.cc	/^long double la::Determinant(const Matrix &A) {$/;"	f	class:la
DeterminantLog	la/uselapack.cc	/^double la::DeterminantLog(const Matrix &A, int *sign_out) {$/;"	f	class:la
Distance	tree/bounds.h	/^  static double Distance(const Vector& a, const Vector& b) {$/;"	f	class:LMetric
DistanceSqEuclidean	la/la.h	/^  inline double DistanceSqEuclidean($/;"	f	namespace:la
DistanceSqEuclidean	la/la.h	/^  inline double DistanceSqEuclidean(const Vector& x, const Vector& y) {$/;"	f	namespace:la
Done	par/thread.h	/^  void Done() {$/;"	f	class:DoneCondition
DoneCondition	par/thread.h	/^  DoneCondition() { done_ = false; }$/;"	f	class:DoneCondition
DoneCondition	par/thread.h	/^class DoneCondition {$/;"	c
Dot	la/uselapack.h	/^  inline double Dot(const Matrix &x, const Matrix &y) {$/;"	f	namespace:la
Dot	la/uselapack.h	/^  inline double Dot(const Vector &x, const Vector &y) {$/;"	f	namespace:la
Dot	la/uselapack.h	/^  inline double Dot(index_t length, const double *x, const double *y) {$/;"	f	namespace:la
DummyRecursiveAttribute	par/thread.h	/^  struct DummyRecursiveAttribute {};$/;"	s	class:Mutex
Dup	base/deprecated.h	/^  inline T *Dup(const T *src, size_t elems = 1) {$/;"	f	namespace:mem
DupBytes	base/deprecated.h	/^  inline T *DupBytes(const T *src, size_t bytes) {$/;"	f	namespace:mem
DupConstruct	base/deprecated.h	/^  inline T *DupConstruct(const T *src, size_t elems = 1) {$/;"	f	namespace:mem
E	math/math_lib.h	/^  const double E = 2.7182818284590452354;$/;"	v
END	file/textfile.h	/^    END,$/;"	e	enum:TextTokenizer::TokenType
EXPAND_EQUALS	base/cc.h	193;"	d
EXPAND_GREATER_THAN	base/cc.h	171;"	d
EXPAND_HETERO_EQUALS	base/cc.h	274;"	d
EXPAND_HETERO_GREATER_THAN	base/cc.h	251;"	d
EXPAND_HETERO_LESS_THAN	base/cc.h	221;"	d
EXPAND_LESS_THAN	base/cc.h	149;"	d
EXTERN_C_BEGIN	base/compiler.h	50;"	d
EXTERN_C_BEGIN	base/compiler.h	52;"	d
EXTERN_C_END	base/compiler.h	61;"	d
EXTERN_C_END	base/compiler.h	63;"	d
EXTERN_C_START	base/deprecated.h	53;"	d
EigenExpert	la/uselapack.cc	/^success_t la::EigenExpert(Matrix *A_garbage,$/;"	f	class:la
EigenvaluesInit	la/uselapack.cc	/^success_t la::EigenvaluesInit(const Matrix &A, Vector *w) {$/;"	f	class:la
EigenvaluesInit	la/uselapack.h	/^  inline success_t EigenvaluesInit(const Matrix &A,$/;"	f	namespace:la
EigenvectorsInit	la/uselapack.cc	/^success_t la::EigenvectorsInit(const Matrix &A, Vector *w, Matrix *V) {$/;"	f	class:la
EigenvectorsInit	la/uselapack.cc	/^success_t la::EigenvectorsInit(const Matrix &A,$/;"	f	class:la
Elem	col/arraylist.h	/^  typedef TElem Elem;$/;"	t	class:ArrayList
ElemOf	base/otrav_impl.h	/^    void ElemOf(const T *array) {$/;"	f	class:ot__private::Printer
ElemOf	base/otrav_impl.h	/^    void ElemOf(const T *array) {}$/;"	f	class:ot__private::Aliaser
ElemOf	base/otrav_impl.h	/^    void ElemOf(const T *array) {}$/;"	f	class:ot__private::Copier
ElemOf	base/otrav_impl.h	/^    void ElemOf(const T *array) {}$/;"	f	class:ot__private::Deserializer
ElemOf	base/otrav_impl.h	/^    void ElemOf(const T *array) {}$/;"	f	class:ot__private::Destructor
ElemOf	base/otrav_impl.h	/^    void ElemOf(const T *array) {}$/;"	f	class:ot__private::Freezer
ElemOf	base/otrav_impl.h	/^    void ElemOf(const T *array) {}$/;"	f	class:ot__private::Relocator
ElemOf	base/otrav_impl.h	/^    void ElemOf(const T *array) {}$/;"	f	class:ot__private::Serializer
ElemOf	base/otrav_impl.h	/^    void ElemOf(const T *array) {}$/;"	f	class:ot__private::TransientDestructor
ElemOf	base/otrav_impl.h	/^    void ElemOf(const T *array) {}$/;"	f	class:ot__private::TransientUnstructor
ElemOf	base/otrav_impl.h	/^    void ElemOf(const T *array) {}$/;"	f	class:ot__private::Unstructor
Empty	base/cc.h	/^class Empty {};$/;"	c
EmptyStatistic	tree/statistic.h	/^  EmptyStatistic() {}$/;"	f	class:EmptyStatistic
EmptyStatistic	tree/statistic.h	/^class EmptyStatistic {$/;"	c
EnsureSizeAtLeast	col/arraylist.h	/^  void EnsureSizeAtLeast(index_t size) {$/;"	f	class:ArrayList
Entry	col/heap.h	/^  struct Entry {$/;"	s	class:MinHeap
Enum	base/otrav_impl.h	/^    void Enum(T &obj) {$/;"	f	class:ot__private::Deserializer
Enum	base/otrav_impl.h	/^    void Enum(T &obj) {$/;"	f	class:ot__private::Printer
Enum	base/otrav_impl.h	/^    void Enum(T &obj) {$/;"	f	class:ot__private::Serializer
Enum	base/otrav_impl.h	/^    void Enum(T &obj) {$/;"	f	class:ot__private::TransientUnstructor
Enum	base/otrav_impl.h	/^    void Enum(T &obj) {$/;"	f	class:ot__private::Unstructor
Enum	base/otrav_impl.h	/^    void Enum(T &obj) {}$/;"	f	class:ot__private::Aliaser
Enum	base/otrav_impl.h	/^    void Enum(T &obj) {}$/;"	f	class:ot__private::Copier
Enum	base/otrav_impl.h	/^    void Enum(T &obj) {}$/;"	f	class:ot__private::Destructor
Enum	base/otrav_impl.h	/^    void Enum(T &obj) {}$/;"	f	class:ot__private::Freezer
Enum	base/otrav_impl.h	/^    void Enum(T &obj) {}$/;"	f	class:ot__private::Relocator
Enum	base/otrav_impl.h	/^    void Enum(T &obj) {}$/;"	f	class:ot__private::TransientDestructor
EpanKernel	math/kernel.h	/^class EpanKernel {$/;"	c
EqualsNoCase	col/col_string.h	/^  bool EqualsNoCase(const char *s) const {$/;"	f	class:String
Error	file/textfile.cc	/^void TextLineReader::Error(const char *format, ...) {$/;"	f	class:TextLineReader
Error	file/textfile.cc	/^void TextTokenizer::Error(const char *format, ...) {$/;"	f	class:TextTokenizer
Error_	file/textfile.cc	/^void TextTokenizer::Error_(const char *msg, const ArrayList<char>& token) {$/;"	f	class:TextTokenizer
EvalUnnorm	math/kernel.h	/^  double EvalUnnorm(double dist) const {$/;"	f	class:EpanKernel
EvalUnnorm	math/kernel.h	/^  double EvalUnnorm(double dist) const {$/;"	f	class:GaussianKernel
EvalUnnorm	math/kernel.h	/^  double EvalUnnorm(double dist) const {$/;"	f	class:GaussianStarKernel
EvalUnnormOnSq	math/kernel.h	/^  double EvalUnnormOnSq(double sqdist) const {$/;"	f	class:EpanKernel
EvalUnnormOnSq	math/kernel.h	/^  double EvalUnnormOnSq(double sqdist) const {$/;"	f	class:GaussianKernel
EvalUnnormOnSq	math/kernel.h	/^  double EvalUnnormOnSq(double sqdist) const {$/;"	f	class:GaussianStarKernel
Exit_	par/thread.h	/^  void Exit_() {$/;"	f	class:Thread
ExtractAppend	col/arraylist.h	/^void ArrayList<TElem>::ExtractAppend(index_t pos, index_t size,$/;"	f	class:ArrayList
ExtractInit	col/arraylist.h	/^  void ExtractInit(index_t pos, index_t size, Elem *dest) {$/;"	f	class:ArrayList
ExtractInit	col/arraylist.h	/^void ArrayList<TElem>::ExtractInit(index_t pos, index_t size,$/;"	f	class:ArrayList
F77_FALSE	base/fortran.h	89;"	d
F77_FUNC	base/fortran.h	105;"	d
F77_TRUE	base/fortran.h	91;"	d
F77_UNKNOWN_ARGS	base/fortran.h	108;"	d
F77_UNKNOWN_ARGS	base/fortran.h	110;"	d
FAILED	base/common.h	344;"	d
FASTLIB_FASTLIB_H	fastlib.h	41;"	d
FASTLIB_FASTLIB_H	fastlib_int.h	42;"	d
FASTLIB_FASTLIB_INT_H	fastlib_int.h	41;"	d
FATAL	base/common.h	214;"	d
FILE_TEXTFILE_H	file/textfile.h	42;"	d
FLT_INF	base/cc.cc	/^const float FLT_INF = std::numeric_limits<float>::infinity();$/;"	v
FLT_NAN	base/cc.cc	/^const float FLT_NAN = std::numeric_limits<float>::quiet_NaN();$/;"	v
FL_MSG_FATAL	base/common.h	/^  FL_MSG_FATAL = 0,$/;"	e	enum:__anon1
FL_MSG_NONFATAL	base/common.h	/^  FL_MSG_NONFATAL = 1,$/;"	e	enum:__anon1
FL_MSG_NOTIFY	base/common.h	/^  FL_MSG_NOTIFY = 3$/;"	e	enum:__anon1
FL_MSG_NOTIFY_STAR	base/common.h	/^  FL_MSG_NOTIFY_STAR = 2,$/;"	e	enum:__anon1
FORBID_ACCIDENTAL_COPIES	base/cc.h	82;"	d
FORBID_COPY	base/deprecated.h	67;"	d
FOR_ALL_PRIMITIVES_DO	base/cc.h	287;"	d
FX_BOOL	fx/fx.h	/^  FX_BOOL,$/;"	e	enum:__anon20
FX_BOOL_LIST	fx/fx.h	/^  FX_BOOL_LIST,$/;"	e	enum:__anon20
FX_CUSTOM	fx/fx.h	/^  FX_CUSTOM = -1$/;"	e	enum:__anon20
FX_DATANODE_H	fx/datanode.h	42;"	d
FX_DEFAULT	fx/fx.h	/^  FX_DEFAULT,$/;"	e	enum:__anon19
FX_DOUBLE	fx/fx.h	/^  FX_DOUBLE,$/;"	e	enum:__anon20
FX_DOUBLE_LIST	fx/fx.h	/^  FX_DOUBLE_LIST,$/;"	e	enum:__anon20
FX_ENTRY_DOC_DONE	fx/fx.h	268;"	d
FX_H	fx/fx.h	44;"	d
FX_INT	fx/fx.h	/^  FX_INT,$/;"	e	enum:__anon20
FX_INT_LIST	fx/fx.h	/^  FX_INT_LIST,$/;"	e	enum:__anon20
FX_MODULE	fx/fx.h	/^  FX_MODULE,$/;"	e	enum:__anon19
FX_PARAM	fx/fx.h	/^  FX_PARAM,$/;"	e	enum:__anon19
FX_PROVIDED	fx/fx.h	/^  FX_PROVIDED,$/;"	e	enum:__anon19
FX_REQUIRED	fx/fx.h	/^  FX_REQUIRED,$/;"	e	enum:__anon19
FX_RESERVED	fx/fx.h	/^  FX_RESERVED,$/;"	e	enum:__anon19
FX_RESULT	fx/fx.h	/^  FX_RESULT,$/;"	e	enum:__anon19
FX_STR	fx/fx.h	/^  FX_STR = 0,$/;"	e	enum:__anon20
FX_STR_LIST	fx/fx.h	/^  FX_STR_LIST,$/;"	e	enum:__anon20
FX_SUBMODULE_DOC_DONE	fx/fx.h	271;"	d
FX_TIMER	fx/fx.h	/^  FX_TIMER$/;"	e	enum:__anon19
FX_TIMER_H	fx/stopwatch.h	42;"	d
FX_UNKNOWN	fx/fx.h	/^  FX_UNKNOWN = 0,$/;"	e	enum:__anon19
FX__BUF_SIZE	fx/fx.c	63;"	d	file:
FX__FATAL	fx/fx.c	281;"	d	file:
FX__NONFATAL	fx/fx.c	285;"	d	file:
FX__SEMIFATAL	fx/fx.c	289;"	d	file:
Factorial	math/discrete.cc	/^double math::Factorial(int d) {$/;"	f	class:math
Features	file/textfile.h	/^  enum Features {$/;"	g	class:TextTokenizer
Find	col/col_string.h	/^  index_t Find(char c) const {$/;"	f	class:String
Find	col/col_string.h	/^  index_t Find(const char* s) const {$/;"	f	class:String
FindAny	col/col.cc	/^index_t String::FindAny(const char *char_set, index_t skip_initial) const {$/;"	f	class:String
FindBoundFromMatrix	tree/kdtree_impl.h	/^  void FindBoundFromMatrix(const GenMatrix<T>& matrix,$/;"	f	namespace:tree_kdtree_private
FindByBeginCount	tree/spacetree.h	/^  BinarySpaceTree* FindByBeginCount($/;"	f	class:BinarySpaceTree
FindByBeginCount	tree/spacetree.h	/^  const BinarySpaceTree* FindByBeginCount($/;"	f	class:BinarySpaceTree
FindR	col/col_string.h	/^  index_t FindR(char c) const {$/;"	f	class:String
FixLength	col/col_string.h	/^  void FixLength()$/;"	f	class:String
Format	data/dataset.cc	/^void DatasetFeature::Format(double value, String *result) const {$/;"	f	class:DatasetFeature
Format	data/dataset.h	/^  void Format(index_t feature, index_t point, String *result) const {$/;"	f	class:Dataset
Free	base/ccmem.h	/^  inline void Free(T* ptr) {$/;"	f	namespace:mem
Free	col/fastalloc.h	/^  static void Free(char *item) {$/;"	f	class:SlabAllocator
FreeDestruct	base/ccmem.h	/^  inline void FreeDestruct(T *array, size_t elems = 1) {$/;"	f	namespace:mem
Freeze	base/otrav.h	/^  inline size_t Freeze(char *block, const T &src) {$/;"	f	namespace:ot
Freezer	base/otrav_impl.h	/^    Freezer(char *block, const T &src) {$/;"	f	class:ot__private::Freezer
Freezer	base/otrav_impl.h	/^  class Freezer {$/;"	c	namespace:ot__private
FrozenSize	base/otrav.h	/^  inline size_t FrozenSize(const T &obj) {$/;"	f	namespace:ot
GIGABYTE	base/common.h	143;"	d
GaussianKernel	math/kernel.h	/^class GaussianKernel {$/;"	c
GaussianStarKernel	math/kernel.h	/^class GaussianStarKernel {$/;"	c
GenEigenNonSymmetric	la/uselapack.cc	/^success_t la::GenEigenNonSymmetric(Matrix *A_garbage, Matrix *B_garbage,$/;"	f	class:la
GenEigenSymmetric	la/uselapack.cc	/^success_t la::GenEigenSymmetric(int itype, Matrix *A_eigenvec, Matrix *B_chol, double *w) {$/;"	f	class:la
GenMatrix	la/matrix.h	/^  GenMatrix() {$/;"	f	class:GenMatrix
GenMatrix	la/matrix.h	/^  GenMatrix(const GenMatrix<T>& other) {$/;"	f	class:GenMatrix
GenMatrix	la/matrix.h	/^  GenMatrix(index_t in_rows, index_t in_cols) {$/;"	f	class:GenMatrix
GenMatrix	la/matrix.h	/^class GenMatrix {$/;"	c
GenVector	la/matrix.h	/^  GenVector() {$/;"	f	class:GenVector
GenVector	la/matrix.h	/^  GenVector(const GenVector& other) {$/;"	f	class:GenVector
GenVector	la/matrix.h	/^class GenVector {$/;"	c
GeneralCrossValidator	data/crossvalidation.h	/^  GeneralCrossValidator() {}$/;"	f	class:GeneralCrossValidator
GeneralCrossValidator	data/crossvalidation.h	/^class GeneralCrossValidator {$/;"	c
GetChar_	file/textfile.h	/^  int GetChar_() {$/;"	f	class:TextTokenizer
GetColumnPtr	la/matrix.h	/^  T *GetColumnPtr(index_t col) {$/;"	f	class:GenMatrix
GetColumnPtr	la/matrix.h	/^  const T *GetColumnPtr(index_t col) const {$/;"	f	class:GenMatrix
GetColumnPtr	la/matrix.h	/^  const double *GetColumnPtr(index_t col) const {$/;"	f	class:SmallMatrix
GetColumnPtr	la/matrix.h	/^  double *GetColumnPtr(index_t col) {$/;"	f	class:SmallMatrix
GetLabels	data/dataset.cc	/^void Dataset::GetLabels(ArrayList<double> &labels_list,$/;"	f	class:Dataset
Gobble	file/textfile.cc	/^bool TextLineReader::Gobble() {$/;"	f	class:TextLineReader
Gobble	file/textfile.cc	/^void TextTokenizer::Gobble() {$/;"	f	class:TextTokenizer
Grain	par/grain.h	/^  typedef TGrain Grain;$/;"	t	class:GrainQueue
Grain	par/grain.h	/^  typedef TGrain Grain;$/;"	t	class:ThreadedGrainRunner
GrainQueue	par/grain.h	/^  GrainQueue() {}$/;"	f	class:GrainQueue
GrainQueue	par/grain.h	/^class GrainQueue {$/;"	c
GrowTo	col/arraylist.h	/^  void GrowTo(index_t size) {$/;"	f	class:ArrayList
HAS_CUTOFF	math/kernel.h	/^  static const bool HAS_CUTOFF = false;$/;"	m	class:GaussianKernel
HAS_CUTOFF	math/kernel.h	/^  static const bool HAS_CUTOFF = false;$/;"	m	class:GaussianStarKernel
HAS_CUTOFF	math/kernel.h	/^  static const bool HAS_CUTOFF = true;$/;"	m	class:EpanKernel
HAVE_RDTSC	fx/stopwatch.h	61;"	d
IDENTIFIER	file/textfile.h	/^    IDENTIFIER,$/;"	e	enum:TextTokenizer::TokenType
INTEGER	data/dataset.h	/^      INTEGER,$/;"	e	enum:DatasetFeature::Type
INTEGER	file/textfile.h	/^    INTEGER$/;"	e	enum:TextTokenizer::TokenType
INVALID	file/textfile.h	/^    INVALID = -1,$/;"	e	enum:TextTokenizer::TokenType
IS_CONSTANT_EXPRESION	base/deprecated.h	54;"	d
IS_CONST_EXPR	base/compiler.h	133;"	d
IS_CONST_EXPR	base/compiler.h	135;"	d
IS_PRINTER	base/otrav_impl.h	/^    enum { IS_PRINTER = 0 };$/;"	e	enum:ot__private::Aliaser::__anon9
IS_PRINTER	base/otrav_impl.h	/^    enum { IS_PRINTER = 0 };$/;"	e	enum:ot__private::Copier::__anon8
IS_PRINTER	base/otrav_impl.h	/^    enum { IS_PRINTER = 0 };$/;"	e	enum:ot__private::Deserializer::__anon13
IS_PRINTER	base/otrav_impl.h	/^    enum { IS_PRINTER = 0 };$/;"	e	enum:ot__private::Destructor::__anon7
IS_PRINTER	base/otrav_impl.h	/^    enum { IS_PRINTER = 0 };$/;"	e	enum:ot__private::Freezer::__anon10
IS_PRINTER	base/otrav_impl.h	/^    enum { IS_PRINTER = 0 };$/;"	e	enum:ot__private::Relocator::__anon11
IS_PRINTER	base/otrav_impl.h	/^    enum { IS_PRINTER = 0 };$/;"	e	enum:ot__private::Serializer::__anon12
IS_PRINTER	base/otrav_impl.h	/^    enum { IS_PRINTER = 0 };$/;"	e	enum:ot__private::TransientDestructor::__anon6
IS_PRINTER	base/otrav_impl.h	/^    enum { IS_PRINTER = 0 };$/;"	e	enum:ot__private::TransientUnstructor::__anon4
IS_PRINTER	base/otrav_impl.h	/^    enum { IS_PRINTER = 0 };$/;"	e	enum:ot__private::Unstructor::__anon5
IS_PRINTER	base/otrav_impl.h	/^    enum { IS_PRINTER = 1 };$/;"	e	enum:ot__private::Printer::__anon3
IncreaseCap_	col/arraylist.h	/^void ArrayList<TElem>::IncreaseCap_(index_t cap) {$/;"	f	class:ArrayList
IndexFromPtr	col/col_string.h	/^  index_t IndexFromPtr(const char *position) const {$/;"	f	class:String
InfixCopy	col/arraylist.h	/^  void InfixCopy(index_t pos, const ArrayList &src) {$/;"	f	class:ArrayList
InfixCopy	col/arraylist.h	/^  void InfixCopy(index_t pos, const Elem *src, index_t size) {$/;"	f	class:ArrayList
InfixSteal	col/arraylist.h	/^void ArrayList<TElem>::InfixSteal(index_t pos, ArrayList *src) {$/;"	f	class:ArrayList
InformDebug	base/cc.cc	/^    InformDebug() {$/;"	f	class:cc__private::InformDebug
InformDebug	base/cc.cc	/^  class InformDebug {$/;"	c	namespace:cc__private	file:
Init	col/arraylist.h	/^  void Init() {$/;"	f	class:ArrayList
Init	col/arraylist.h	/^  void Init(index_t size) {$/;"	f	class:ArrayList
Init	col/arraylist.h	/^  void Init(index_t size, index_t cap) {$/;"	f	class:ArrayList
Init	col/col_string.h	/^  void Init() {$/;"	f	class:String
Init	col/col_string.h	/^  void Init(int finalLength) {$/;"	f	class:String
Init	col/heap.h	/^  void Init() {$/;"	f	class:MinHeap
Init	col/intmap.h	/^  void Init() {$/;"	f	class:DenseIntMap
Init	col/queue.h	/^  void Init() {$/;"	f	class:Queue
Init	col/rangeset.h	/^  void Init() {$/;"	f	class:RangeSet
Init	data/crossvalidation.h	/^void GeneralCrossValidator<TLearner>::Init($/;"	f	class:GeneralCrossValidator
Init	data/crossvalidation.h	/^void SimpleCrossValidator<TClassifier>::Init($/;"	f	class:SimpleCrossValidator
Init	data/dataset.cc	/^void DatasetInfo::Init(const char *name_in) {$/;"	f	class:DatasetInfo
Init	la/matrix.h	/^  void Init(index_t in_length) {$/;"	f	class:GenVector
Init	la/matrix.h	/^  void Init(index_t in_rows, index_t in_cols) {$/;"	f	class:GenMatrix
Init	math/kernel.h	/^  void Init(double bandwidth_in) {$/;"	f	class:EpanKernel
Init	math/kernel.h	/^  void Init(double bandwidth_in) {$/;"	f	class:GaussianKernel
Init	math/kernel.h	/^  void Init(double bandwidth_in, index_t dims) {$/;"	f	class:EpanKernel
Init	math/kernel.h	/^  void Init(double bandwidth_in, index_t dims) {$/;"	f	class:GaussianKernel
Init	math/kernel.h	/^  void Init(double bandwidth_in, index_t dims) {$/;"	f	class:GaussianStarKernel
Init	math/math_lib.h	/^  void Init(double lo_in, double hi_in) {$/;"	f	struct:DRange
Init	par/grain.h	/^  void Init() {$/;"	f	class:GrainQueue
Init	par/grain.h	/^  void Init(GrainQueue<Grain> *queue_in, Context context_in) {$/;"	f	class:ThreadedGrainRunner
Init	par/thread.h	/^  void Init(Task* task_in) {$/;"	f	class:Thread
Init	tree/bounds.h	/^  void Init(index_t dimension) {$/;"	f	class:DHrectBound
Init	tree/spacetree.h	/^  void Init(index_t begin_in, index_t count_in) {$/;"	f	class:BinarySpaceTree
Init	tree/statistic.h	/^  void Init(const TDataset& dataset, index_t start, index_t count) {$/;"	f	class:EmptyStatistic
Init	tree/statistic.h	/^  void Init(const TDataset& dataset, index_t start, index_t count,$/;"	f	class:EmptyStatistic
InitAlias	col/arraylist.h	/^  void InitAlias(Elem *ptr, index_t size) {$/;"	f	class:ArrayList
InitBlank	data/dataset.h	/^  void InitBlank() {$/;"	f	class:Dataset
InitContinuous	data/dataset.cc	/^void DatasetInfo::InitContinuous(index_t n_features,$/;"	f	class:DatasetInfo
InitContinuous	data/dataset.h	/^  void InitContinuous(const char *name_in) {$/;"	f	class:DatasetFeature
InitCopy	base/otrav.h	/^  inline void InitCopy(T *dest, const T &src) {$/;"	f	namespace:ot
InitCopy	col/arraylist.h	/^  void InitCopy(const ArrayList &src, index_t cap) {$/;"	f	class:ArrayList
InitCopy	col/arraylist.h	/^  void InitCopy(const Elem *src, index_t size) {$/;"	f	class:ArrayList
InitCopy	col/arraylist.h	/^  void InitCopy(const Elem *src, index_t size, index_t cap) {$/;"	f	class:ArrayList
InitDeserialize	base/otrav.h	/^  inline size_t InitDeserialize(T *dest, FILE *stream) {$/;"	f	namespace:ot
InitDiagonal	la/matrix.h	/^  void InitDiagonal(const GenVector<T>& v) {$/;"	f	class:GenMatrix
InitEmptySet	math/math_lib.h	/^  void InitEmptySet() {$/;"	f	struct:DRange
InitFromArff	data/dataset.cc	/^success_t DatasetInfo::InitFromArff(TextLineReader *reader,$/;"	f	class:DatasetInfo
InitFromCsv	data/dataset.cc	/^success_t DatasetInfo::InitFromCsv(TextLineReader *reader,$/;"	f	class:DatasetInfo
InitFromFile	data/dataset.cc	/^success_t Dataset::InitFromFile(TextLineReader *reader,$/;"	f	class:Dataset
InitFromFile	data/dataset.cc	/^success_t Dataset::InitFromFile(const char *fname) {$/;"	f	class:Dataset
InitFromFile	data/dataset.cc	/^success_t DatasetInfo::InitFromFile(TextLineReader *reader,$/;"	f	class:DatasetInfo
InitInteger	data/dataset.h	/^  void InitInteger(const char *name_in) {$/;"	f	class:DatasetFeature
InitNominal	data/dataset.h	/^  void InitNominal(const char *name_in) {$/;"	f	class:DatasetFeature
InitRaw	col/arraylist.h	/^  Elem *InitRaw(index_t size) {$/;"	f	class:ArrayList
InitRaw	col/arraylist.h	/^  Elem *InitRaw(index_t size, index_t cap) {$/;"	f	class:ArrayList
InitRepeat	col/arraylist.h	/^  void InitRepeat(const Elem &elem, index_t size) {$/;"	f	class:ArrayList
InitRepeat	col/arraylist.h	/^  void InitRepeat(const Elem &elem, index_t size, index_t cap) {$/;"	f	class:ArrayList
InitSprintf	col/col.cc	/^const String& String::InitSprintf(const char *format, ...) {$/;"	f	class:String
InitSteal	col/arraylist.h	/^  void InitSteal(Elem *ptr, index_t size) {$/;"	f	class:ArrayList
InitSteal	col/arraylist.h	/^  void InitSteal(Elem *ptr, index_t size, index_t cap) {$/;"	f	class:ArrayList
InitSubAlias	col/arraylist.h	/^  void InitSubAlias(const ArrayList &src, index_t pos, index_t size) {$/;"	f	class:ArrayList
InitSubCopy	col/arraylist.h	/^  void InitSubCopy(const ArrayList &src, index_t pos, index_t size) {$/;"	f	class:ArrayList
InitSubCopy	col/arraylist.h	/^  void InitSubCopy(const ArrayList &src, index_t pos, index_t size,$/;"	f	class:ArrayList
InitThaw	base/otrav.h	/^  inline void InitThaw(T *dest, const char *block) {$/;"	f	namespace:ot
InitUniversalSet	math/math_lib.h	/^  void InitUniversalSet() {$/;"	f	struct:DRange
Insert	col/arraylist.h	/^  Elem &Insert(index_t pos) {$/;"	f	class:ArrayList
Insert	col/arraylist.h	/^  void Insert(index_t pos, index_t inc) {$/;"	f	class:ArrayList
InsertCopy	col/arraylist.h	/^  Elem &InsertCopy(index_t pos, const Elem &src) {$/;"	f	class:ArrayList
InsertRaw	col/arraylist.h	/^  Elem *InsertRaw(index_t pos, index_t inc = 1) {$/;"	f	class:ArrayList
IntLog2	math/discrete.h	/^  inline unsigned IntLog2(unsigned i) {$/;"	f	namespace:math
Inverse	la/uselapack.cc	/^success_t la::Inverse(Matrix *A) {$/;"	f	class:la
InverseExpert	la/uselapack.h	/^  inline success_t InverseExpert(f77_integer *pivots, Matrix *LU_in_B_out) {$/;"	f	namespace:la
InverseInit	la/uselapack.h	/^  inline success_t InverseInit(const Matrix &A, Matrix *B) {$/;"	f	namespace:la
InverseOverwrite	la/uselapack.cc	/^success_t la::InverseOverwrite(const Matrix &A, Matrix *B) {$/;"	f	class:la
IsEOF_	file/textfile.h	/^  bool IsEOF_() {$/;"	f	class:TextTokenizer
IsPowerTwo	math/discrete.h	/^  inline bool IsPowerTwo(TAnyIntegerType i) {$/;"	f	namespace:math
KILOBYTE	base/common.h	139;"	d
Key	col/heap.h	/^  typedef TKey Key;$/;"	t	class:MinHeap
LA_BLAS_H	la/blas.h	33;"	d
LA_CLAPACK_H	la/clapack.h	39;"	d
LA_MATRIX_H	la/matrix.h	41;"	d
LA_USELAPACK_H	la/uselapack.h	39;"	d
LI	base/common.h	131;"	d
LI	base/common.h	133;"	d
LI	base/common.h	135;"	d
LI	data/dataset.cc	264;"	d	file:
LINEAR_H	la/la.h	43;"	d
LINE_MAX	fx/datanode.c	12;"	d	file:
LMetric	la/la.h	/^  inline double LMetric($/;"	f	namespace:la
LMetric	tree/bounds.h	/^class LMetric {$/;"	c
LN_10	math/math_lib.h	/^  const double LN_10 = 2.30258509299404568402;$/;"	v
LN_2	math/math_lib.h	/^  const double LN_2 = 0.69314718055994530942;$/;"	v
LOG10_E	math/math_lib.h	/^  const double LOG10_E = 0.43429448190325182765;$/;"	v
LOG2_E	math/math_lib.h	/^  const double LOG2_E = 1.4426950408889634074;$/;"	v
LOW_PRIORITY	par/thread.h	/^    LOW_PRIORITY = 20,$/;"	e	enum:Thread::__anon17
LTSC	fx/stopwatch.h	53;"	d
LargeLoad	data/dataset.h	/^  success_t LargeLoad(const char *fname, GenMatrix<Precision> *matrix) {$/;"	f	namespace:data
Learner	data/crossvalidation.h	/^  typedef TLearner Learner;$/;"	t	class:GeneralCrossValidator
LeastSquareFit	la/la.h	/^  inline success_t LeastSquareFit(Matrix &y, Matrix &x, Matrix *a) {$/;"	f	namespace:la
LeastSquareFit	la/la.h	/^  inline success_t LeastSquareFit(Vector &y, Matrix &x, Vector *a) {$/;"	f	namespace:la
LeastSquareFitTrans	la/la.h	/^  inline success_t LeastSquareFitTrans(Matrix &y, Matrix &x, Matrix *a) {$/;"	f	namespace:la
LengthEuclidean	la/uselapack.h	/^  inline double LengthEuclidean(const Vector &x) {$/;"	f	namespace:la
LengthEuclidean	la/uselapack.h	/^  inline double LengthEuclidean(index_t length, const double *x) {$/;"	f	namespace:la
Load	data/dataset.cc	/^success_t data::Load(const char *fname, Matrix *matrix) {$/;"	f	class:data
LoadKdTree	tree/kdtree.h	/^  success_t LoadKdTree(datanode *module,$/;"	f	namespace:tree
Lock	par/thread.h	/^  void Lock() const {$/;"	f	class:Mutex
Lockable	par/thread.h	/^  Lockable() {}$/;"	f	class:Lockable
Lockable	par/thread.h	/^class Lockable : public TContained, public Mutex {$/;"	c
MAKE_MATRIX_TRANS	la/uselapack_test.cc	51;"	d	file:
MAKE_VECTOR	la/uselapack_test.cc	61;"	d	file:
MATH_DISCRETE_H	math/discrete.h	41;"	d
MATH_GEOMETRY_H	math/geometry.h	41;"	d
MATH_KERNEL_H	math/kernel.h	41;"	d
MATH_MATH_LIB_H	math/math_lib.h	41;"	d
MATH_STATISTICS_H	math/statistics.h	41;"	d
MAX_STRIDE	base/compiler.h	297;"	d
MEGABYTE	base/common.h	141;"	d
MEM__DEBUG_MEMORY	base/ccmem.h	51;"	d
MEM__DEGUG_MEMORY	base/ccmem.h	515;"	d
MUST_NOT_FAIL	base/common.h	379;"	d
MUST_NOT_FAIL_MSG	base/common.h	370;"	d
MUST_PASS	base/common.h	361;"	d
MUST_PASS_MSG	base/common.h	352;"	d
MakeBoundVector	tree/kdtree_impl.h	/^    void MakeBoundVector(const GenVector<T>& point, $/;"	f	namespace:tree_kdtree_private
MakeColumnSlice	la/matrix.h	/^  void MakeColumnSlice(index_t start_col, index_t n_cols_new,$/;"	f	class:GenMatrix
MakeColumnSubvector	la/matrix.h	/^  void MakeColumnSubvector(index_t col, index_t start_row, index_t n_rows_new,$/;"	f	class:GenMatrix
MakeColumnVector	la/matrix.h	/^  void MakeColumnVector(index_t col, GenVector<T> *dest) const {$/;"	f	class:GenMatrix
MakeConstantMatrix	la/uselapack_test.cc	/^void MakeConstantMatrix(index_t n_rows, index_t n_cols, double v, Matrix *m) {$/;"	f
MakeConstantVector	la/uselapack_test.cc	/^void MakeConstantVector(index_t n, double d, Vector *v) {$/;"	f
MakeCountMatrix	la/uselapack_test.cc	/^void MakeCountMatrix(index_t n_rows, index_t n_cols, Matrix *m) {$/;"	f
MakeCountVector	la/uselapack_test.cc	/^void MakeCountVector(index_t n, Vector *v) {$/;"	f
MakeIdentityPermutation	math/discrete.cc	/^void math::MakeIdentityPermutation(index_t size, index_t *array) {$/;"	f	class:math
MakeIdentityPermutation	math/discrete.h	/^  inline void MakeIdentityPermutation($/;"	f	namespace:math
MakeInversePermutation	math/discrete.cc	/^void math::MakeInversePermutation(index_t size,$/;"	f	class:math
MakeInversePermutation	math/discrete.h	/^  inline void MakeInversePermutation($/;"	f	namespace:math
MakeKdTreeMidpoint	tree/kdtree.h	/^    TKdTree *MakeKdTreeMidpoint(GenMatrix<T>& matrix, $/;"	f	namespace:tree
MakeKdTreeMidpoint	tree/kdtree.h	/^    TKdTree *MakeKdTreeMidpoint(GenMatrix<T>& matrix, index_t leaf_size,$/;"	f	namespace:tree
MakeKdTreeMidpointSelective	tree/kdtree.h	/^  TKdTree *MakeKdTreeMidpointSelective(GenMatrix<T>& matrix, $/;"	f	namespace:tree
MakeRandomPermutation	math/discrete.cc	/^void math::MakeRandomPermutation(index_t size, index_t *array) {$/;"	f	class:math
MakeRandomPermutation	math/discrete.h	/^  inline void MakeRandomPermutation($/;"	f	namespace:math
MakeReshaped	la/matrix.h	/^  void MakeReshaped(index_t n_rows_in, index_t n_cols_in,$/;"	f	class:GenMatrix
MakeSubvector	la/matrix.h	/^  void MakeSubvector(index_t start_index, index_t len, GenVector* dest) {$/;"	f	class:GenVector
Match	file/textfile.h	/^  bool Match(const char *exact) {$/;"	f	class:TextTokenizer
MatchDouble	file/textfile.h	/^  bool MatchDouble() {$/;"	f	class:TextTokenizer
MatchIdentifier	file/textfile.h	/^  bool MatchIdentifier() {$/;"	f	class:TextTokenizer
MatchInteger	file/textfile.h	/^  bool MatchInteger() {$/;"	f	class:TextTokenizer
MatchNoCase	file/textfile.h	/^  bool MatchNoCase(const char *str) {$/;"	f	class:TextTokenizer
MatchNumber	file/textfile.h	/^  bool MatchNumber() {$/;"	f	class:TextTokenizer
MatchPunct	file/textfile.h	/^  bool MatchPunct() {$/;"	f	class:TextTokenizer
MatchQuasiIdentifier	file/textfile.h	/^  bool MatchQuasiIdentifier() {$/;"	f	class:TextTokenizer
MatchString	file/textfile.h	/^  bool MatchString() {$/;"	f	class:TextTokenizer
MatchType	file/textfile.h	/^  bool MatchType(TokenType type) {$/;"	f	class:TextTokenizer
Matrix	la/matrix.h	/^typedef GenMatrix<double> Matrix;$/;"	t
MatrixApproxEqual	la/uselapack_test.cc	/^bool MatrixApproxEqual(const Matrix& a, const Matrix& b,$/;"	f
MatrixPartition	tree/kdtree_impl.h	/^   index_t MatrixPartition($/;"	f	namespace:tree_kdtree_private
MaxDelta	tree/bounds.h	/^ double MaxDelta(const DHrectBound& other, double box_width, int dim)$/;"	f	class:DHrectBound
MaxDistance	tree/bounds.h	/^  double MaxDistance(const DBallBound& other) const {$/;"	f	class:DBallBound
MaxDistance	tree/bounds.h	/^  double MaxDistance(const Point& point) const {$/;"	f	class:DBallBound
MaxDistanceSq	tree/bounds.h	/^  double MaxDistanceSq(const DBallBound& other) const {$/;"	f	class:DBallBound
MaxDistanceSq	tree/bounds.h	/^  double MaxDistanceSq(const DHrectBound& other) const {$/;"	f	class:DHrectBound
MaxDistanceSq	tree/bounds.h	/^  double MaxDistanceSq(const Point& point) const {$/;"	f	class:DBallBound
MaxDistanceSq	tree/bounds.h	/^  double MaxDistanceSq(const Vector& point) const {$/;"	f	class:DHrectBound
MaxDistanceSq	tree/bounds.h	/^  double MaxDistanceSq(const double *point) const {$/;"	f	class:DHrectBound
MaxDistanceSq	tree/bounds.h	/^ double MaxDistanceSq(const DHrectBound& other, const Vector& offset) const {$/;"	f	class:DHrectBound
MaxUnnormValue	math/kernel.h	/^  double MaxUnnormValue() {$/;"	f	class:EpanKernel
MaxUnnormValue	math/kernel.h	/^  double MaxUnnormValue() {$/;"	f	class:GaussianKernel
MaxWith	math/math_lib.h	/^  void MaxWith(Value incoming_val) {$/;"	f	class:MinMaxVal
MaxWith	math/math_lib.h	/^  void MaxWith(const DRange& range) {$/;"	f	struct:DRange
MaxWith	math/math_lib.h	/^  void MaxWith(double v) {$/;"	f	struct:DRange
Mean	math/statistics.cc	/^double Mean(Vector V) {$/;"	f	namespace:math
Metric	tree/bounds.h	/^  typedef TMetric Metric;$/;"	t	class:DBallBound
MidDistance	tree/bounds.h	/^  double MidDistance(const DBallBound& other) const {$/;"	f	class:DBallBound
MidDistance	tree/bounds.h	/^  double MidDistance(const Point& point) const {$/;"	f	class:DBallBound
MidDistanceSq	tree/bounds.h	/^  double MidDistanceSq(const DBallBound& other) const {$/;"	f	class:DBallBound
MidDistanceSq	tree/bounds.h	/^  double MidDistanceSq(const DHrectBound& other) const {$/;"	f	class:DHrectBound
MinDelta	tree/bounds.h	/^ double MinDelta(const DHrectBound& other, double box_width, int dim)$/;"	f	class:DHrectBound
MinDistance	tree/bounds.h	/^  double MinDistance(const DBallBound& other) const {$/;"	f	class:DBallBound
MinDistance	tree/bounds.h	/^  double MinDistance(const Point& point) const {$/;"	f	class:DBallBound
MinDistanceSq	tree/bounds.h	/^  double MinDistanceSq(const DBallBound& other) const {$/;"	f	class:DBallBound
MinDistanceSq	tree/bounds.h	/^  double MinDistanceSq(const DHrectBound& other) const {$/;"	f	class:DHrectBound
MinDistanceSq	tree/bounds.h	/^  double MinDistanceSq(const Point& point) const {$/;"	f	class:DBallBound
MinDistanceSq	tree/bounds.h	/^  double MinDistanceSq(const Vector& point) const {$/;"	f	class:DHrectBound
MinDistanceSq	tree/bounds.h	/^  double MinDistanceSq(const double *mpoint) const {$/;"	f	class:DHrectBound
MinDistanceSq	tree/bounds.h	/^ double MinDistanceSq(const DHrectBound& other, const Vector& offset) const {$/;"	f	class:DHrectBound
MinHeap	col/heap.h	/^class MinHeap {$/;"	c
MinMaxVal	math/math_lib.h	/^class MinMaxVal {$/;"	c
MinToMid	tree/bounds.h	/^  double MinToMid(const DBallBound& other) const {$/;"	f	class:DBallBound
MinToMidSq	tree/bounds.h	/^  double MinToMidSq(const DBallBound& other) const {$/;"	f	class:DBallBound
MinToMidSq	tree/bounds.h	/^  double MinToMidSq(const DHrectBound& other) const {$/;"	f	class:DHrectBound
MinWith	math/math_lib.h	/^  void MinWith(Value incoming_val) {$/;"	f	class:MinMaxVal
MinWith	math/math_lib.h	/^  void MinWith(const DRange& range) {$/;"	f	struct:DRange
MinWith	math/math_lib.h	/^  void MinWith(double v) {$/;"	f	struct:DRange
MinimaxDistance	tree/bounds.h	/^  double MinimaxDistance(const DBallBound& other) const {$/;"	f	class:DBallBound
MinimaxDistanceSq	tree/bounds.h	/^  double MinimaxDistanceSq(const DBallBound& other) const {$/;"	f	class:DBallBound
MinimaxDistanceSq	tree/bounds.h	/^  double MinimaxDistanceSq(const DHrectBound& other) const {$/;"	f	class:DHrectBound
MoreLines	file/textfile.h	/^  bool MoreLines() {$/;"	f	class:TextLineReader
MoreTokens	file/textfile.h	/^  bool MoreTokens() const {$/;"	f	class:TextTokenizer
Move	base/ccmem.h	/^  inline T *Move(T *dest, const T *src, size_t elems = 1) {$/;"	f	namespace:mem
Move	base/ccmem.h	/^  inline T *Move(T *dest, const U *src, size_t elems = 1) {$/;"	f	namespace:mem
MoveBytes	base/ccmem.h	/^  inline T *MoveBytes(T *dest, const U *src, size_t bytes) {$/;"	f	namespace:mem
MulExpert	la/uselapack.h	/^  inline void MulExpert($/;"	f	namespace:la
MulInit	la/uselapack.h	/^  inline void MulInit(const Matrix &A, const Matrix &B, Matrix *C) {$/;"	f	namespace:la
MulInit	la/uselapack.h	/^  inline void MulInit(const Matrix &A, const Vector &x, Vector *y) {$/;"	f	namespace:la
MulInit	la/uselapack.h	/^  inline void MulInit(const Vector &x, const Matrix &A, Vector *y) {$/;"	f	namespace:la
MulOverwrite	la/uselapack.h	/^  inline void MulOverwrite(const Matrix &A, const Matrix &B, Matrix *C) {$/;"	f	namespace:la
MulOverwrite	la/uselapack.h	/^  inline void MulOverwrite(const Matrix &A, const Vector &x, Vector *y) {$/;"	f	namespace:la
MulOverwrite	la/uselapack.h	/^  inline void MulOverwrite(const Vector &x, const Matrix &A, Vector *y) {$/;"	f	namespace:la
MulTransAInit	la/uselapack.h	/^  inline void MulTransAInit($/;"	f	namespace:la
MulTransAOverwrite	la/uselapack.h	/^  inline void MulTransAOverwrite($/;"	f	namespace:la
MulTransBInit	la/uselapack.h	/^  inline void MulTransBInit($/;"	f	namespace:la
MulTransBOverwrite	la/uselapack.h	/^  inline void MulTransBOverwrite($/;"	f	namespace:la
Mutex	par/thread.h	/^  Mutex() {$/;"	f	class:Mutex
Mutex	par/thread.h	/^  Mutex(DummyRecursiveAttribute v) {$/;"	f	class:Mutex
Mutex	par/thread.h	/^class Mutex {$/;"	c
MyStruct	col/col_test.cc	/^  MyStruct() {}$/;"	f	struct:MyStruct
MyStruct	col/col_test.cc	/^  MyStruct(int a_in, int b_in, MyStruct *next_in) {$/;"	f	struct:MyStruct
MyStruct	col/col_test.cc	/^struct MyStruct {$/;"	s	file:
NATURAL_STRIDE	base/compiler.h	/^  static const int NATURAL_STRIDE =$/;"	m	struct:compiler_strideof
NEED_OTRAV_IMPL	base/otrav.h	1489;"	d
NEED_OTRAV_IMPL	base/otrav.h	1491;"	d
NOMINAL	data/dataset.h	/^      NOMINAL$/;"	e	enum:DatasetFeature::Type
NONFATAL	base/common.h	223;"	d
NOP	base/common.h	73;"	d
NORMAL_PRIORITY	par/thread.h	/^    NORMAL_PRIORITY = 0$/;"	e	enum:Thread::__anon17
NOTIFY	base/common.h	241;"	d
NOTIFY_STAR	base/common.h	232;"	d
NO_COMPILER_DEFS	base/compiler.h	70;"	d
Name	base/otrav_impl.h	/^    void Name(const char *name, const T &obj) {$/;"	f	class:ot__private::Printer
Name	base/otrav_impl.h	/^    void Name(const char *name, const T &obj) {}$/;"	f	class:ot__private::Aliaser
Name	base/otrav_impl.h	/^    void Name(const char *name, const T &obj) {}$/;"	f	class:ot__private::Copier
Name	base/otrav_impl.h	/^    void Name(const char *name, const T &obj) {}$/;"	f	class:ot__private::Deserializer
Name	base/otrav_impl.h	/^    void Name(const char *name, const T &obj) {}$/;"	f	class:ot__private::Destructor
Name	base/otrav_impl.h	/^    void Name(const char *name, const T &obj) {}$/;"	f	class:ot__private::Freezer
Name	base/otrav_impl.h	/^    void Name(const char *name, const T &obj) {}$/;"	f	class:ot__private::Relocator
Name	base/otrav_impl.h	/^    void Name(const char *name, const T &obj) {}$/;"	f	class:ot__private::Serializer
Name	base/otrav_impl.h	/^    void Name(const char *name, const T &obj) {}$/;"	f	class:ot__private::TransientDestructor
Name	base/otrav_impl.h	/^    void Name(const char *name, const T &obj) {}$/;"	f	class:ot__private::TransientUnstructor
Name	base/otrav_impl.h	/^    void Name(const char *name, const T &obj) {}$/;"	f	class:ot__private::Unstructor
NextChar_	file/textfile.cc	/^char TextTokenizer::NextChar_() {$/;"	f	class:TextTokenizer
NextChar_	file/textfile.cc	/^char TextTokenizer::NextChar_(ArrayList<char> *token) {$/;"	f	class:TextTokenizer
Node	col/queue.h	/^    Node() : next(NULL) { }$/;"	f	struct:Queue::Node
Node	col/queue.h	/^    Node(const T& value) : data(value), next(NULL) {}$/;"	f	struct:Queue::Node
Node	col/queue.h	/^  struct Node {$/;"	s	class:Queue
OBJECT_TRAVERSAL	base/otrav.h	1312;"	d
OBJECT_TRAVERSAL	col/col_string.h	/^  OBJECT_TRAVERSAL(String) {$/;"	f	class:String
OBJECT_TRAVERSAL	col/heap.h	/^  OBJECT_TRAVERSAL(MinHeap) {$/;"	f	class:MinHeap
OBJECT_TRAVERSAL	data/dataset.h	/^  OBJECT_TRAVERSAL(Dataset) {$/;"	f	class:Dataset
OBJECT_TRAVERSAL	data/dataset.h	/^  OBJECT_TRAVERSAL(DatasetFeature) {$/;"	f	class:DatasetFeature
OBJECT_TRAVERSAL	data/dataset.h	/^  OBJECT_TRAVERSAL(DatasetInfo) {$/;"	f	class:DatasetInfo
OBJECT_TRAVERSAL	math/kernel.h	/^  OBJECT_TRAVERSAL(EpanKernel) {$/;"	f	class:EpanKernel
OBJECT_TRAVERSAL	math/kernel.h	/^  OBJECT_TRAVERSAL(GaussianKernel) {$/;"	f	class:GaussianKernel
OBJECT_TRAVERSAL	math/kernel.h	/^  OBJECT_TRAVERSAL(GaussianStarKernel) {$/;"	f	class:GaussianStarKernel
OBJECT_TRAVERSAL	math/math_lib.h	/^  OBJECT_TRAVERSAL(DRange) {$/;"	f	struct:DRange
OBJECT_TRAVERSAL	math/math_lib.h	/^  OBJECT_TRAVERSAL(MinMaxVal) {$/;"	f	class:MinMaxVal
OBJECT_TRAVERSAL	tree/bounds.h	/^  OBJECT_TRAVERSAL(DBallBound) {$/;"	f	class:DBallBound
OBJECT_TRAVERSAL	tree/bounds.h	/^  OBJECT_TRAVERSAL(DHrectBound) {$/;"	f	class:DHrectBound
OBJECT_TRAVERSAL_CORE	base/otrav.h	1240;"	d
OBJECT_TRAVERSAL_DEPRECATED_COPIES	base/otrav.h	1350;"	d
OBJECT_TRAVERSAL_DEPRECATED_COPIES	col/arraylist.h	/^  OBJECT_TRAVERSAL_DEPRECATED_COPIES(ArrayList) {$/;"	f	class:ArrayList
OBJECT_TRAVERSAL_NO_COPIES	base/otrav.h	1330;"	d
OBJECT_TRAVERSAL_ONLY	base/otrav.h	1210;"	d
OBJECT_TRAVERSAL_ONLY	la/matrix.h	/^  OBJECT_TRAVERSAL_ONLY(GenMatrix) {$/;"	f	class:GenMatrix
OBJECT_TRAVERSAL_ONLY	la/matrix.h	/^  OBJECT_TRAVERSAL_ONLY(GenVector) {$/;"	f	class:GenVector
OBJECT_TRAVERSAL_SHALLOW	base/otrav.h	1381;"	d
OBJECT_TRAVERSAL_SHALLOW	col/heap.h	/^    OBJECT_TRAVERSAL_SHALLOW(Entry) {$/;"	f	struct:MinHeap::Entry
OT_ALIAS_METHODS	base/otrav.h	853;"	d
OT_ALLOC	base/otrav.h	467;"	d
OT_ALLOC_EXPERT	base/otrav.h	448;"	d
OT_ARRAY	base/otrav.h	413;"	d
OT_ARRAY_EXPERT	base/otrav.h	391;"	d
OT_ARRAY_IMPL	base/otrav.h	242;"	d
OT_BECOME_ALIAS	base/otrav.h	766;"	d
OT_BECOME_ALIAS	col/arraylist.h	/^  OT_BECOME_ALIAS(ArrayList) {$/;"	f	class:ArrayList
OT_BECOME_NON_ALIAS	base/otrav.h	740;"	d
OT_CONSTRUCTOR	base/otrav.h	533;"	d
OT_COPY_CONSTRUCTOR	base/otrav.h	572;"	d
OT_COPY_METHOD	base/otrav.h	636;"	d
OT_CUSTOM_DESTRUCT	base/otrav.h	1482;"	d
OT_CUSTOM_PRINT	base/otrav.h	1431;"	d
OT_CUSTOM_PRINT	col/col_string.h	/^  OT_CUSTOM_PRINT(String) {$/;"	f	class:String
OT_CUSTOM_PRINT_OBJ	base/otrav.h	87;"	d
OT_DEBUG_DESTRUCT_OK	base/otrav.h	1072;"	d
OT_DEBUG_INIT_OK	base/otrav.h	958;"	d
OT_DEBUG_MODIFY_OK	base/otrav.h	1016;"	d
OT_DEF	base/otrav.h	2030;"	d
OT_DEF	col/intmap.h	/^  OT_DEF(DenseIntMap) {$/;"	f	class:DenseIntMap
OT_DEF	col/rangeset.h	/^  OT_DEF(RangeSet) {$/;"	f	class:RangeSet
OT_DEF	tree/spacetree.h	/^  OT_DEF(BinarySpaceTree) {$/;"	f	class:BinarySpaceTree
OT_DEFAULT_CONSTRUCT	base/otrav.h	910;"	d
OT_DEFAULT_CONSTRUCT	col/arraylist.h	/^  OT_DEFAULT_CONSTRUCT(ArrayList) {$/;"	f	class:ArrayList
OT_DEF_BASIC	base/otrav.h	2031;"	d
OT_DEF_BASIC	col/rangeset.h	/^    OT_DEF_BASIC(Range) {$/;"	f	struct:RangeSet::Range
OT_DEPRECATED_COPY_CONSTRUCTOR	base/otrav.h	593;"	d
OT_DESTRUCTOR	base/otrav.h	551;"	d
OT_ENUM	base/otrav.h	221;"	d
OT_ENUM_EXPERT	base/otrav.h	198;"	d
OT_ENUM_VAL	base/otrav.h	136;"	d
OT_FIX	base/otrav.h	2028;"	d
OT_FREEZE_METHODS	base/otrav.h	681;"	d
OT_IS_ALIAS	base/otrav.h	796;"	d
OT_IS_ALIAS	col/arraylist.h	/^  OT_IS_ALIAS(ArrayList) {$/;"	f	class:ArrayList
OT_MALLOC_ARRAY	base/otrav.h	2025;"	d
OT_MY_ARRAY	base/otrav.h	2024;"	d
OT_MY_OBJECT	base/otrav.h	2023;"	d
OT_OBJ	base/otrav.h	125;"	d
OT_PRINT_METHOD	base/otrav.h	659;"	d
OT_PTR	base/otrav.h	344;"	d
OT_PTR_EXPERT	base/otrav.h	326;"	d
OT_PTR_NULLABLE	base/otrav.h	2026;"	d
OT_REFILL_TRANSIENTS	base/otrav.h	1136;"	d
OT_REFILL_TRANSIENTS	col/arraylist.h	/^  OT_REFILL_TRANSIENTS(ArrayList) {$/;"	f	class:ArrayList
OT_REFILL_TRANSIENTS	la/matrix.h	/^  OT_REFILL_TRANSIENTS(GenMatrix) {$/;"	f	class:GenMatrix
OT_REFILL_TRANSIENTS	la/matrix.h	/^  OT_REFILL_TRANSIENTS(GenVector) {$/;"	f	class:GenVector
OT_RENEW_METHOD	base/otrav.h	616;"	d
OT_SERIALIZE_METHODS	base/otrav.h	705;"	d
OT_STATIC_ARRAY	base/otrav.h	295;"	d
OT_STATIC_ARRAY_EXPERT	base/otrav.h	280;"	d
OT_STR	base/otrav.h	517;"	d
OT_STR_EXPERT	base/otrav.h	501;"	d
OT_TRANSIENTS	base/otrav.h	1185;"	d
OT_TRANSIENTS	col/arraylist.h	/^  OT_TRANSIENTS(ArrayList) {$/;"	f	class:ArrayList
OT__Aliasable	base/otrav_impl.h	/^inline bool OT__Aliasable(const T *ot__obj) { return false; }$/;"	f
OT__BecomeAlias	base/otrav_impl.h	/^inline void OT__BecomeAlias(T *ot__obj) {$/;"	f
OT__BecomeNonAlias	base/otrav_impl.h	/^inline void OT__BecomeNonAlias(T *ot__obj) {}$/;"	f
OT__DebugDestructOK	base/otrav_impl.h	/^inline bool OT__DebugDestructOK(T *ot__obj) {$/;"	f
OT__DebugInitOK	base/otrav_impl.h	/^inline bool OT__DebugInitOK(T *ot__obj) {$/;"	f
OT__DebugModifyOK	base/otrav_impl.h	/^inline bool OT__DebugModifyOK(T *ot__obj) {$/;"	f
OT__DefaultConstruct	base/otrav_impl.h	/^inline void OT__DefaultConstruct(T *ot__obj) {$/;"	f
OT__IsAlias	base/otrav_impl.h	/^inline bool OT__IsAlias(T *ot__obj) { return false; }$/;"	f
OT__MAKE_SHALLOW	base/otrav_impl.h	116;"	d
OT__MAKE_SHALLOW	base/otrav_impl.h	126;"	d
OT__NonConstPtr	base/otrav_impl.h	/^inline bool OT__NonConstPtr(const T *ot__obj) {$/;"	f
OT__PreTraverse	base/otrav_impl.h	/^inline bool OT__PreTraverse(T *ot__dest, const T *ot__src,$/;"	f
OT__RefillTransients	base/otrav_impl.h	/^inline void OT__RefillTransients(T *ot__obj) {$/;"	f
OT__Shallow	base/otrav_impl.h	/^inline bool OT__Shallow(const T *const *ot__obj) { return true; }$/;"	f
OT__Shallow	base/otrav_impl.h	/^inline bool OT__Shallow(const T *ot__obj) { return false; }$/;"	f
OT__ShallowOrPtr	base/otrav_impl.h	/^inline bool OT__ShallowOrPtr(T *const *ot__obj) { return true; }$/;"	f
OT__ShallowOrPtr	base/otrav_impl.h	/^inline bool OT__ShallowOrPtr(const T *ot__obj) {$/;"	f
OT__TraverseObject	base/otrav_impl.h	/^inline void OT__TraverseObject(T *ot__obj, TVisitor *ot__visitor) {$/;"	f
OT__TraverseTransients	base/otrav_impl.h	/^inline void OT__TraverseTransients(T *ot__obj, TVisitor *ot__visitor) {}$/;"	f
Obj	base/otrav_impl.h	/^    void Obj(T &obj) {$/;"	f	class:ot__private::Aliaser
Obj	base/otrav_impl.h	/^    void Obj(T &obj) {$/;"	f	class:ot__private::Copier
Obj	base/otrav_impl.h	/^    void Obj(T &obj) {$/;"	f	class:ot__private::Deserializer
Obj	base/otrav_impl.h	/^    void Obj(T &obj) {$/;"	f	class:ot__private::Destructor
Obj	base/otrav_impl.h	/^    void Obj(T &obj) {$/;"	f	class:ot__private::Freezer
Obj	base/otrav_impl.h	/^    void Obj(T &obj) {$/;"	f	class:ot__private::Printer
Obj	base/otrav_impl.h	/^    void Obj(T &obj) {$/;"	f	class:ot__private::Relocator
Obj	base/otrav_impl.h	/^    void Obj(T &obj) {$/;"	f	class:ot__private::Serializer
Obj	base/otrav_impl.h	/^    void Obj(T &obj) {$/;"	f	class:ot__private::TransientDestructor
Obj	base/otrav_impl.h	/^    void Obj(T &obj) {$/;"	f	class:ot__private::TransientUnstructor
Obj	base/otrav_impl.h	/^    void Obj(T &obj) {$/;"	f	class:ot__private::Unstructor
Obj	base/otrav_impl.h	/^    void Obj(T *&ptr) {$/;"	f	class:ot__private::Freezer
Obj	base/otrav_impl.h	/^    void Obj(T *&ptr) {$/;"	f	class:ot__private::Serializer
Obj	base/otrav_impl.h	/^    void Obj(T *&ptr) {$/;"	f	class:ot__private::TransientUnstructor
Obj	base/otrav_impl.h	/^    void Obj(T *&ptr) {$/;"	f	class:ot__private::Unstructor
Obj	base/otrav_impl.h	/^    void Obj(T *ptr) {$/;"	f	class:ot__private::Printer
Obj	base/otrav_impl.h	/^    void Obj(const char *str) {$/;"	f	class:ot__private::Printer
Open	base/otrav.cc	/^void ot::StandardFormat::Open(const char *name, index_t index, $/;"	f	class:ot::StandardFormat
Open	base/otrav.cc	/^void ot::XMLFormat::Open(const char *name, index_t index,$/;"	f	class:ot::XMLFormat
Open	file/textfile.cc	/^success_t TextLineReader::Open(const char *fname) {$/;"	f	class:TextLineReader
Open	file/textfile.cc	/^success_t TextTokenizer::Open(const char *fname,$/;"	f	class:TextTokenizer
Open	file/textfile.h	/^  success_t Open(const char *fname) {$/;"	f	class:TextWriter
Own	la/matrix.h	/^  void Own(GenMatrix* other) {$/;"	f	class:GenMatrix
Own	la/matrix.h	/^  void Own(GenVector* other) {$/;"	f	class:GenVector
Own	la/matrix.h	/^  void Own(T *in_ptr, index_t in_length) {$/;"	f	class:GenVector
Own	la/matrix.h	/^  void Own(T *ptr_in, index_t n_rows_in, index_t n_cols_in) {$/;"	f	class:GenMatrix
OwnMatrix	data/dataset.h	/^  void OwnMatrix(Matrix* matrix_in) {$/;"	f	class:Dataset
PAR_GRAIN_H	par/grain.h	46;"	d
PAR_TASK_H	par/task.h	41;"	d
PAR_THREAD_H	par/thread.h	40;"	d
PASSED	base/common.h	337;"	d
PI	math/math_lib.h	/^  const double PI = 3.141592653589793238462643383279;$/;"	v
PI_2	math/math_lib.h	/^  const double PI_2 = 1.57079632679489661923;$/;"	v
PLUExpert	la/uselapack.h	/^  inline success_t PLUExpert(f77_integer *pivots, Matrix *A_in_LU_out) {$/;"	f	namespace:la
PLUInit	la/uselapack.cc	/^success_t la::PLUInit(const Matrix &A,$/;"	f	class:la
PREFERRED_POWER	tree/bounds.h	/^  static const int PREFERRED_POWER = t_pow;$/;"	m	class:DHrectBound
PREFERRED_STRIDE	base/compiler.h	/^  static const int PREFERRED_STRIDE =$/;"	m	struct:compiler_strideof
PRINTER__PRIMITIVE_OBJ	base/otrav_impl.h	316;"	d
PRINTER__PRIMITIVE_OBJ	base/otrav_impl.h	324;"	d
PROFILE_ONLY	base/debug.h	93;"	d
PROFILE_ONLY	base/debug.h	95;"	d
PUNCT	file/textfile.h	/^    PUNCT,$/;"	e	enum:TextTokenizer::TokenType
ParentIndex_	col/heap.h	/^  static index_t ParentIndex_(index_t i) {$/;"	f	class:MinHeap
Parse	data/dataset.cc	/^success_t DatasetFeature::Parse(const char *str, double *d) const {$/;"	f	class:DatasetFeature
Peek	file/textfile.h	/^  String& Peek() {$/;"	f	class:TextLineReader
Peek	file/textfile.h	/^  const String& Peek() const {$/;"	f	class:TextLineReader
Peek	file/textfile.h	/^  const String& Peek() const {$/;"	f	class:TextTokenizer
PeekType	file/textfile.h	/^  TokenType PeekType() const {$/;"	f	class:TextTokenizer
PeriodicMaxDistanceSq	tree/bounds.h	/^ double PeriodicMaxDistanceSq(const DHrectBound& other, const Vector& box_size)$/;"	f	class:DHrectBound
PeriodicMaxDistanceSq	tree/bounds.h	/^ double PeriodicMaxDistanceSq(const Vector& point, const Vector& box_size)$/;"	f	class:DHrectBound
PeriodicMinDistanceSq	tree/bounds.h	/^ double PeriodicMinDistanceSq(const DHrectBound& other, const Vector& box_size)$/;"	f	class:DHrectBound
PeriodicMinDistanceSq	tree/bounds.h	/^double PeriodicMinDistanceSq(const Vector& point, const Vector& box_size)$/;"	f	class:DHrectBound
Point	tree/bounds.h	/^  typedef TPoint Point;$/;"	t	class:DBallBound
PointerAbsoluteAddress	base/deprecated.h	/^  inline ptrdiff_t *PointerAbsoluteAddress(const T *ptr) {$/;"	f	namespace:mem
PointerAdd	base/deprecated.h	/^  inline T *PointerAdd(const T *ptr, ptrdiff_t bytes) {$/;"	f	namespace:mem
PointerDiff	base/deprecated.h	/^  inline ptrdiff_t *PointerDiff(const T *lhs, const U *rhs) {$/;"	f	namespace:mem
PointerFreeze	base/otrav.h	/^  void PointerFreeze(const T &obj, char *block) {$/;"	f	namespace:ot
PointerFrozenSize	base/otrav.h	/^  size_t PointerFrozenSize(const T &obj) {$/;"	f	namespace:ot
PointerRefreeze	base/otrav.h	/^  void PointerRefreeze(const T *src, char *dest) {$/;"	f	namespace:ot
PointerRelocate	base/otrav.h	/^  void PointerRelocate(const char *old_loc, char *new_loc) {$/;"	f	namespace:ot
PointerThaw	base/otrav.h	/^  T *PointerThaw(char *block) {$/;"	f	namespace:ot
PointersEqual	base/deprecated.h	/^  inline bool PointersEqual(const T *lhs, const U *rhs) {$/;"	f	namespace:mem
Poison	base/ccmem.h	/^  inline T *Poison(T *array, size_t elems) {$/;"	f	namespace:mem
Poison	base/ccmem.h	/^  inline T *Poison(T *ptr) {$/;"	f	namespace:mem
PoisonBytes	base/ccmem.cc	/^void mem__private::PoisonBytes(char *array_cp, size_t bytes) {$/;"	f	class:mem__private
PoisonBytes	base/ccmem.h	/^  T *PoisonBytes(T *array, size_t bytes) {$/;"	f	namespace:mem
Pop	col/heap.h	/^  Value Pop() {$/;"	f	class:MinHeap
Pop	col/queue.h	/^  T Pop() {$/;"	f	class:Queue
Pop	par/grain.h	/^  Grain *Pop() {$/;"	f	class:GrainQueue
PopBack	col/arraylist.h	/^  void PopBack(index_t dec = 1) {$/;"	f	class:ArrayList
PopBackInit	col/arraylist.h	/^  void PopBackInit(Elem *dest) {$/;"	f	class:ArrayList
PopBackPtr	col/arraylist.h	/^  Elem *PopBackPtr() {$/;"	f	class:ArrayList
PopBackRaw	col/arraylist.h	/^  void PopBackRaw(index_t dec = 1) {$/;"	f	class:ArrayList
PopOnly	col/heap.h	/^  void PopOnly() {$/;"	f	class:MinHeap
PopOnly	col/queue.h	/^  void PopOnly() {$/;"	f	class:Queue
PostArray	base/otrav_impl.h	/^    void PostArray(T *&ptr, index_t len) {}$/;"	f	class:ot__private::Deserializer
PostArray	base/otrav_impl.h	/^    void PostArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Aliaser
PostArray	base/otrav_impl.h	/^    void PostArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Copier
PostArray	base/otrav_impl.h	/^    void PostArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Destructor
PostArray	base/otrav_impl.h	/^    void PostArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Freezer
PostArray	base/otrav_impl.h	/^    void PostArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Relocator
PostArray	base/otrav_impl.h	/^    void PostArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Serializer
PostArray	base/otrav_impl.h	/^    void PostArray(T *&ptr, index_t len,$/;"	f	class:ot__private::TransientDestructor
PostArray	base/otrav_impl.h	/^    void PostArray(T *&ptr, index_t len,$/;"	f	class:ot__private::TransientUnstructor
PostArray	base/otrav_impl.h	/^    void PostArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Unstructor
PostArray	base/otrav_impl.h	/^    void PostArray(T *ptr, index_t len,$/;"	f	class:ot__private::Printer
PostStaticArray	base/otrav_impl.h	/^    void PostStaticArray(T *ptr, index_t len) {$/;"	f	class:ot__private::Printer
PostStaticArray	base/otrav_impl.h	/^    void PostStaticArray(T *ptr, index_t len) {}$/;"	f	class:ot__private::Aliaser
PostStaticArray	base/otrav_impl.h	/^    void PostStaticArray(T *ptr, index_t len) {}$/;"	f	class:ot__private::Copier
PostStaticArray	base/otrav_impl.h	/^    void PostStaticArray(T *ptr, index_t len) {}$/;"	f	class:ot__private::Deserializer
PostStaticArray	base/otrav_impl.h	/^    void PostStaticArray(T *ptr, index_t len) {}$/;"	f	class:ot__private::Destructor
PostStaticArray	base/otrav_impl.h	/^    void PostStaticArray(T *ptr, index_t len) {}$/;"	f	class:ot__private::Freezer
PostStaticArray	base/otrav_impl.h	/^    void PostStaticArray(T *ptr, index_t len) {}$/;"	f	class:ot__private::Relocator
PostStaticArray	base/otrav_impl.h	/^    void PostStaticArray(T *ptr, index_t len) {}$/;"	f	class:ot__private::Serializer
PostStaticArray	base/otrav_impl.h	/^    void PostStaticArray(T *ptr, index_t len) {}$/;"	f	class:ot__private::TransientDestructor
PostStaticArray	base/otrav_impl.h	/^    void PostStaticArray(T *ptr, index_t len) {}$/;"	f	class:ot__private::TransientUnstructor
PostStaticArray	base/otrav_impl.h	/^    void PostStaticArray(T *ptr, index_t len) {}$/;"	f	class:ot__private::Unstructor
Pow	math/math_lib.h	/^  inline double Pow(double d) {$/;"	f	namespace:math
PowAbs	math/math_lib.h	/^  inline double PowAbs(double d) {$/;"	f	namespace:math
PowDistance	tree/bounds.h	/^  static double PowDistance(const Vector& a, const Vector& b) {$/;"	f	class:LMetric
PreArray	base/otrav_impl.h	/^    bool PreArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Aliaser
PreArray	base/otrav_impl.h	/^    bool PreArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Copier
PreArray	base/otrav_impl.h	/^    bool PreArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Deserializer
PreArray	base/otrav_impl.h	/^    bool PreArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Destructor
PreArray	base/otrav_impl.h	/^    bool PreArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Freezer
PreArray	base/otrav_impl.h	/^    bool PreArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Relocator
PreArray	base/otrav_impl.h	/^    bool PreArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Serializer
PreArray	base/otrav_impl.h	/^    bool PreArray(T *&ptr, index_t len,$/;"	f	class:ot__private::TransientDestructor
PreArray	base/otrav_impl.h	/^    bool PreArray(T *&ptr, index_t len,$/;"	f	class:ot__private::TransientUnstructor
PreArray	base/otrav_impl.h	/^    bool PreArray(T *&ptr, index_t len,$/;"	f	class:ot__private::Unstructor
PreArray	base/otrav_impl.h	/^    bool PreArray(T *ptr, index_t len,$/;"	f	class:ot__private::Printer
PreStaticArray	base/otrav_impl.h	/^    bool PreStaticArray(T **ptr, index_t len) {$/;"	f	class:ot__private::TransientUnstructor
PreStaticArray	base/otrav_impl.h	/^    bool PreStaticArray(T **ptr, index_t len) {$/;"	f	class:ot__private::Unstructor
PreStaticArray	base/otrav_impl.h	/^    bool PreStaticArray(T *ptr, index_t len) {$/;"	f	class:ot__private::Aliaser
PreStaticArray	base/otrav_impl.h	/^    bool PreStaticArray(T *ptr, index_t len) {$/;"	f	class:ot__private::Copier
PreStaticArray	base/otrav_impl.h	/^    bool PreStaticArray(T *ptr, index_t len) {$/;"	f	class:ot__private::Deserializer
PreStaticArray	base/otrav_impl.h	/^    bool PreStaticArray(T *ptr, index_t len) {$/;"	f	class:ot__private::Destructor
PreStaticArray	base/otrav_impl.h	/^    bool PreStaticArray(T *ptr, index_t len) {$/;"	f	class:ot__private::Freezer
PreStaticArray	base/otrav_impl.h	/^    bool PreStaticArray(T *ptr, index_t len) {$/;"	f	class:ot__private::Printer
PreStaticArray	base/otrav_impl.h	/^    bool PreStaticArray(T *ptr, index_t len) {$/;"	f	class:ot__private::Relocator
PreStaticArray	base/otrav_impl.h	/^    bool PreStaticArray(T *ptr, index_t len) {$/;"	f	class:ot__private::Serializer
PreStaticArray	base/otrav_impl.h	/^    bool PreStaticArray(T *ptr, index_t len) {$/;"	f	class:ot__private::TransientDestructor
PreStaticArray	base/otrav_impl.h	/^    bool PreStaticArray(T *ptr, index_t len) {$/;"	f	class:ot__private::TransientUnstructor
PreStaticArray	base/otrav_impl.h	/^    bool PreStaticArray(T *ptr, index_t len) {$/;"	f	class:ot__private::Unstructor
PreTraverse	base/otrav_impl.h	/^    bool PreTraverse(T *dest, const T *src, index_t len) { return false; }$/;"	f	class:ot__private::Aliaser
PreTraverse	base/otrav_impl.h	/^    bool PreTraverse(T *dest, const T *src, index_t len) { return false; }$/;"	f	class:ot__private::Freezer
PreTraverse	base/otrav_impl.h	/^    bool PreTraverse(T *dest, const T *src, index_t len) { return false; }$/;"	f	class:ot__private::Printer
PreTraverse	base/otrav_impl.h	/^    bool PreTraverse(T *dest, const T *src, index_t len) { return false; }$/;"	f	class:ot__private::Relocator
PreTraverse	base/otrav_impl.h	/^    bool PreTraverse(T *dest, const T *src, index_t len) { return false; }$/;"	f	class:ot__private::TransientUnstructor
PreTraverse	base/otrav_impl.h	/^    bool PreTraverse(T *dest, const T *src, index_t len) { return false; }$/;"	f	class:ot__private::Unstructor
PreTraverse	base/otrav_impl.h	/^    bool PreTraverse(T *dest, const T *src, index_t len) {$/;"	f	class:ot__private::Copier
PreTraverse	base/otrav_impl.h	/^    bool PreTraverse(T *dest, const T *src, index_t len) {$/;"	f	class:ot__private::Deserializer
PreTraverse	base/otrav_impl.h	/^    bool PreTraverse(T *dest, const T *src, index_t len) {$/;"	f	class:ot__private::Destructor
PreTraverse	base/otrav_impl.h	/^    bool PreTraverse(T *dest, const T *src, index_t len) {$/;"	f	class:ot__private::Serializer
PreTraverse	base/otrav_impl.h	/^    bool PreTraverse(T *dest, const T *src, index_t len) {$/;"	f	class:ot__private::TransientDestructor
PreUntraversed	base/otrav_impl.h	/^    bool PreUntraversed(T **dest, const T **src, index_t len) {$/;"	f	class:ot__private::Deserializer
PreUntraversed	base/otrav_impl.h	/^    bool PreUntraversed(T **dest, const T **src, index_t len) {$/;"	f	class:ot__private::Serializer
PreUntraversed	base/otrav_impl.h	/^    bool PreUntraversed(T *dest, const T *src, index_t len) { return false; }$/;"	f	class:ot__private::Aliaser
PreUntraversed	base/otrav_impl.h	/^    bool PreUntraversed(T *dest, const T *src, index_t len) { return false; }$/;"	f	class:ot__private::Freezer
PreUntraversed	base/otrav_impl.h	/^    bool PreUntraversed(T *dest, const T *src, index_t len) { return false; }$/;"	f	class:ot__private::Printer
PreUntraversed	base/otrav_impl.h	/^    bool PreUntraversed(T *dest, const T *src, index_t len) { return false; }$/;"	f	class:ot__private::Relocator
PreUntraversed	base/otrav_impl.h	/^    bool PreUntraversed(T *dest, const T *src, index_t len) { return false; }$/;"	f	class:ot__private::TransientUnstructor
PreUntraversed	base/otrav_impl.h	/^    bool PreUntraversed(T *dest, const T *src, index_t len) { return false; }$/;"	f	class:ot__private::Unstructor
PreUntraversed	base/otrav_impl.h	/^    bool PreUntraversed(T *dest, const T *src, index_t len) {$/;"	f	class:ot__private::Copier
PreUntraversed	base/otrav_impl.h	/^    bool PreUntraversed(T *dest, const T *src, index_t len) {$/;"	f	class:ot__private::Deserializer
PreUntraversed	base/otrav_impl.h	/^    bool PreUntraversed(T *dest, const T *src, index_t len) {$/;"	f	class:ot__private::Destructor
PreUntraversed	base/otrav_impl.h	/^    bool PreUntraversed(T *dest, const T *src, index_t len) {$/;"	f	class:ot__private::Serializer
PreUntraversed	base/otrav_impl.h	/^    bool PreUntraversed(T *dest, const T *src, index_t len) {$/;"	f	class:ot__private::TransientDestructor
Primitive	base/otrav.cc	/^void ot::StandardFormat::Primitive(const char *name, index_t index,$/;"	f	class:ot::StandardFormat
Primitive	base/otrav.cc	/^void ot::XMLFormat::Primitive(const char *name, index_t index,$/;"	f	class:ot::XMLFormat
Print	base/otrav.h	/^  const char *Print(const T &obj, const char *name, FILE *stream = stdout) {$/;"	f	namespace:ot
Print	base/otrav.h	/^  void Print(const T &obj, FILE *stream = stdout) {$/;"	f	namespace:ot
Print	tree/spacetree.h	/^  void Print() const {$/;"	f	class:BinarySpaceTree
PrintDebug	la/matrix.h	/^  void PrintDebug(const char *name = "", FILE *stream = stderr) const {$/;"	f	class:GenMatrix
PrintDebug	la/matrix.h	/^  void PrintDebug(const char *name = "", FILE *stream = stderr) const {$/;"	f	class:GenVector
PrintFooter_	base/otrav.cc	/^void ot::XMLFormat::PrintFooter_(const char *type) {$/;"	f	class:ot::XMLFormat
PrintHeader_	base/otrav.cc	/^void ot::StandardFormat::PrintHeader_(const char *name, index_t index,$/;"	f	class:ot::StandardFormat
PrintHeader_	base/otrav.cc	/^void ot::XMLFormat::PrintHeader_(const char *name, index_t index,$/;"	f	class:ot::XMLFormat
PrintIndent_	base/otrav.cc	/^void ot::StandardFormat::PrintIndent_() {$/;"	f	class:ot::StandardFormat
PrintIndent_	base/otrav.cc	/^void ot::XMLFormat::PrintIndent_() {$/;"	f	class:ot::XMLFormat
Printer	base/otrav_impl.h	/^    Printer(const T &obj, const char *name, FILE *stream)$/;"	f	class:ot__private::Printer
Printer	base/otrav_impl.h	/^  class Printer {$/;"	c	namespace:ot__private
Printf	file/textfile.cc	/^success_t TextWriter::Printf(const char *format, ...) {$/;"	f	class:TextWriter
Ptr	base/otrav.cc	/^void ot::StandardFormat::Ptr(const char *name, index_t index, $/;"	f	class:ot::StandardFormat
Ptr	base/otrav.cc	/^void ot::XMLFormat::Ptr(const char *name, index_t index,$/;"	f	class:ot::XMLFormat
PtrAbsAddr	base/ccmem.h	/^  inline ptrdiff_t PtrAbsAddr(const T *ptr) {$/;"	f	namespace:mem
PtrAddBytes	base/ccmem.h	/^  inline T *PtrAddBytes(T *ptr, ptrdiff_t bytes) {$/;"	f	namespace:mem
PtrAddBytes	base/ccmem.h	/^  inline const T *PtrAddBytes(const T *ptr, ptrdiff_t bytes) {$/;"	f	namespace:mem
PtrDiffBytes	base/ccmem.h	/^  inline ptrdiff_t PtrDiffBytes(const T *lhs, const U *rhs) {$/;"	f	namespace:mem
PtrsEqual	base/ccmem.h	/^  inline bool PtrsEqual(const T *lhs, const U *rhs) {$/;"	f	namespace:mem
PushBack	col/arraylist.h	/^  Elem &PushBack() {$/;"	f	class:ArrayList
PushBack	col/arraylist.h	/^  void PushBack(index_t inc) {$/;"	f	class:ArrayList
PushBackCopy	col/arraylist.h	/^  Elem &PushBackCopy(const Elem &src) {$/;"	f	class:ArrayList
PushBackRaw	col/arraylist.h	/^  Elem *PushBackRaw(index_t inc = 1) {$/;"	f	class:ArrayList
Put	col/heap.h	/^  void Put(Key key, Value value) {$/;"	f	class:MinHeap
Put	par/grain.h	/^  void Put(double difficulty, Grain *grain) {$/;"	f	class:GrainQueue
QRExpert	la/uselapack.cc	/^success_t la::QRExpert(Matrix *A_in_Q_out, Matrix *R) {$/;"	f	class:la
QRInit	la/uselapack.cc	/^success_t la::QRInit(const Matrix &A, Matrix *Q, Matrix *R) {$/;"	f	class:la
Queue	col/queue.h	/^  Queue() { DEBUG_POISON_PTR(tailp_); }$/;"	f	class:Queue
Queue	col/queue.h	/^class Queue {$/;"	c
RDTSC	fx/stopwatch.h	60;"	d
READY	par/thread.h	/^  enum {UNINIT, READY, ATTACHED, DETACHED, DONE} status_;$/;"	e	enum:Thread::__anon18
REF	base/compiler.h	349;"	d
REF	base/compiler.h	351;"	d
REINTERPRET_CAST	base/compiler.h	336;"	d
REQUIRE	file/textfile_test.cc	52;"	d	file:
RandInt	math/math_lib.h	/^  inline int RandInt(int hi_exclusive) {$/;"	f	namespace:math
RandInt	math/math_lib.h	/^  inline int RandInt(int lo, int hi_exclusive) {$/;"	f	namespace:math
Random	math/math_lib.h	/^  inline double Random() {$/;"	f	namespace:math
Random	math/math_lib.h	/^  inline double Random(double lo, double hi) {$/;"	f	namespace:math
Range	col/rangeset.h	/^  struct Range {$/;"	s	class:RangeSet
RangeDistance	tree/bounds.h	/^  DRange RangeDistance(const DBallBound& other) const {$/;"	f	class:DBallBound
RangeDistanceSq	tree/bounds.h	/^  DRange RangeDistanceSq(const DBallBound& other) const {$/;"	f	class:DBallBound
RangeDistanceSq	tree/bounds.h	/^  DRange RangeDistanceSq(const DHrectBound& other) const {$/;"	f	class:DHrectBound
RangeDistanceSq	tree/bounds.h	/^  DRange RangeDistanceSq(const Vector& point) const {$/;"	f	class:DHrectBound
RangeSet	col/rangeset.h	/^class RangeSet {$/;"	c
RangeUnnormOnSq	math/kernel.h	/^  DRange RangeUnnormOnSq(const DRange& range) const {$/;"	f	class:EpanKernel
RangeUnnormOnSq	math/kernel.h	/^  DRange RangeUnnormOnSq(const DRange& range) const {$/;"	f	class:GaussianKernel
RangeUnnormOnSq	math/kernel.h	/^  DRange RangeUnnormOnSq(const DRange& range) const {$/;"	f	class:GaussianStarKernel
RawLMetric	la/la.h	/^  inline double RawLMetric($/;"	f	namespace:la
ReadLine_	file/textfile.cc	/^char *TextLineReader::ReadLine_() {$/;"	f	class:TextLineReader
ReadMatrix	data/dataset.cc	/^success_t DatasetInfo::ReadMatrix(TextLineReader *reader, Matrix *matrix) const {$/;"	f	class:DatasetInfo
ReadPoint	data/dataset.cc	/^success_t DatasetInfo::ReadPoint(TextLineReader *reader, double *point,$/;"	f	class:DatasetInfo
ReadStrLen_	base/otrav_impl.h	/^    index_t ReadStrLen_() {$/;"	f	class:ot__private::Deserializer
Read_	base/otrav_impl.h	/^    void Read_(T *ptr, index_t elems = 1) {$/;"	f	class:ot__private::Deserializer
Realloc	base/ccmem.h	/^  inline T *Realloc(T *array, size_t elems) {$/;"	f	namespace:mem
ReallocBytes	base/ccmem.h	/^  inline T *ReallocBytes(T *array, size_t bytes) {$/;"	f	namespace:mem
RecursiveMutex	par/thread.h	/^  RecursiveMutex() : Mutex(DummyRecursiveAttribute()) {}$/;"	f	class:RecursiveMutex
RecursiveMutex	par/thread.h	/^class RecursiveMutex : public Mutex {$/;"	c
ReleasePointer	col/arraylist.h	/^  Elem *ReleasePointer() {$/;"	f	class:ArrayList
ReleasePtr	col/arraylist.h	/^  Elem *ReleasePtr() {$/;"	f	class:ArrayList
Relocator	base/otrav_impl.h	/^    Relocator(char *block, const T *orig) {$/;"	f	class:ot__private::Relocator
Relocator	base/otrav_impl.h	/^  class Relocator {$/;"	c	namespace:ot__private
Remove	col/arraylist.h	/^  void Remove(index_t pos, index_t dec = 1) {$/;"	f	class:ArrayList
RemoveInit	col/arraylist.h	/^  void RemoveInit(index_t pos, Elem *dest) {$/;"	f	class:ArrayList
RemoveRaw	col/arraylist.h	/^  void RemoveRaw(index_t pos, index_t dec = 1) {$/;"	f	class:ArrayList
RepeatConstruct	base/ccmem.h	/^  inline T *RepeatConstruct(T *array, const U &init, size_t elems) {$/;"	f	namespace:mem
RepeatConstruct	base/otrav.h	/^  inline T *RepeatConstruct(T *array, const T &init, size_t elems) {$/;"	f	namespace:ot
Reserve	col/arraylist.h	/^  void Reserve(index_t size) {$/;"	f	class:ArrayList
Reset	col/rangeset.h	/^  void Reset() {$/;"	f	class:RangeSet
Reset	math/math_lib.h	/^  void Reset(double lo_in, double hi_in) {$/;"	f	struct:DRange
Reset	tree/bounds.h	/^  void Reset() {$/;"	f	class:DHrectBound
Reset_	col/arraylist.h	/^  void Reset_() {$/;"	f	class:ArrayList
Resize	base/deprecated.h	/^  inline T *Resize(T *array, size_t elems = 1) {$/;"	f	namespace:mem
Resize	col/arraylist.h	/^  void Resize(index_t size) {$/;"	f	class:ArrayList
ResizeNoalias	la/matrix.h	/^  void ResizeNoalias(index_t new_n_cols) {$/;"	f	class:GenMatrix
RoundInt	math/math_lib.h	/^  inline int64 RoundInt(double d) {$/;"	f	namespace:math
Run	data/crossvalidation.h	/^void GeneralCrossValidator<TLearner>::Run(bool randomized) {  $/;"	f	class:GeneralCrossValidator
Run	data/crossvalidation.h	/^void SimpleCrossValidator<TClassifier>::Run(bool randomized) {$/;"	f	class:SimpleCrossValidator
Run	par/grain.h	/^    void Run() {$/;"	f	struct:ThreadedGrainRunner::ThreadTask
RunOneGrain	par/grain.h	/^  bool RunOneGrain() {$/;"	f	class:ThreadedGrainRunner
RunThreads	par/grain.h	/^  void RunThreads(int num_threads) {$/;"	f	class:ThreadedGrainRunner
S	base/compiler.h	/^  struct S {T x; char c;};$/;"	s	struct:compiler_strideof
SHOWSIZE	base/config/template_types.c	11;"	d	file:
SQRT2	math/math_lib.h	/^  const double SQRT2 = 1.41421356237309504880;$/;"	v
STANDARD_FORMAT__PRIMITIVE	base/otrav.cc	100;"	d	file:
STANDARD_FORMAT__PRIMITIVE	base/otrav.cc	81;"	d	file:
STANDARD_FORMAT__PRIMITIVE	base/otrav_impl.h	179;"	d
STANDARD_FORMAT__PRIMITIVE	base/otrav_impl.h	186;"	d
STATIC_CAST	base/compiler.h	329;"	d
STOPWATCH_ACTIVE	fx/stopwatch.h	111;"	d
STRIDE	base/compiler.h	/^  enum { STRIDE = NATURAL_STRIDE > PREFERRED_STRIDE$/;"	e	enum:compiler_strideof::__anon16
STRING	file/textfile.h	/^    STRING,$/;"	e	enum:TextTokenizer::TokenType
SUCCESS_FAIL	base/common.h	/^  SUCCESS_FAIL = 31,$/;"	e	enum:__anon2
SUCCESS_FROM_C	base/common.h	383;"	d
SUCCESS_FROM_INT	base/deprecated.h	50;"	d
SUCCESS_FROM_LAPACK	la/uselapack.h	59;"	d
SUCCESS_PASS	base/common.h	/^  SUCCESS_PASS = 96$/;"	e	enum:__anon2
SUCCESS_WARN	base/common.h	/^  SUCCESS_WARN = 48,$/;"	e	enum:__anon2
SVDExpert	la/uselapack.cc	/^success_t la::SVDExpert(Matrix* A_garbage, double *s, double *U, double *VT) {$/;"	f	class:la
SVDInit	la/uselapack.h	/^  inline success_t SVDInit(const Matrix &A, Vector *s) {$/;"	f	namespace:la
SVDInit	la/uselapack.h	/^  inline success_t SVDInit(const Matrix &A, Vector *s, Matrix *U, Matrix *VT) {$/;"	f	namespace:la
SWAP_BUF_SIZE	base/ccmem.h	/^  const size_t SWAP_BUF_SIZE = 64;$/;"	v
Sanitize	file/textfile.cc	/^void Sanitize(const String& src, String* dest) {$/;"	f
Save	data/dataset.cc	/^success_t data::Save(const char *fname, const Matrix& matrix) {$/;"	f	class:data
SaveTrainTest_	data/crossvalidation.h	/^void SimpleCrossValidator<TClassifier>::SaveTrainTest_($/;"	f	class:SimpleCrossValidator
SaveTrainValidationSet_	data/crossvalidation.h	/^void GeneralCrossValidator<TLearner>::SaveTrainValidationSet_($/;"	f	class:GeneralCrossValidator
Scale	la/uselapack.h	/^  inline void Scale(double alpha, Matrix *X) {$/;"	f	namespace:la
Scale	la/uselapack.h	/^  inline void Scale(double alpha, Vector *x) {$/;"	f	namespace:la
Scale	la/uselapack.h	/^  inline void Scale(index_t length, double alpha, double *x) {$/;"	f	namespace:la
ScaleInit	la/uselapack.h	/^  inline void ScaleInit(double alpha, const Matrix &X, Matrix *Y) {$/;"	f	namespace:la
ScaleInit	la/uselapack.h	/^  inline void ScaleInit(double alpha, const Vector &x, Vector *y) {$/;"	f	namespace:la
ScaleOverwrite	la/uselapack.h	/^  inline void ScaleOverwrite(double alpha, const Matrix &X, Matrix *Y) {$/;"	f	namespace:la
ScaleOverwrite	la/uselapack.h	/^  inline void ScaleOverwrite(double alpha, const Vector &x, Vector *y) {$/;"	f	namespace:la
ScaleOverwrite	la/uselapack.h	/^  inline void ScaleOverwrite(index_t length,$/;"	f	namespace:la
ScaleRows	la/uselapack.h	/^  inline void ScaleRows(const Matrix& d, Matrix *X) {$/;"	f	namespace:la
ScaleRows	la/uselapack.h	/^  inline void ScaleRows(const Vector& d, Matrix *X) {$/;"	f	namespace:la
ScaleRows	la/uselapack.h	/^  inline void ScaleRows(index_t n_rows, index_t n_cols,$/;"	f	namespace:la
ScanNumber_	file/textfile.cc	/^void TextTokenizer::ScanNumber_(char c, ArrayList<char> *token) {$/;"	f	class:TextTokenizer
ScanString_	file/textfile.cc	/^void TextTokenizer::ScanString_(char ending, ArrayList<char> *token) {$/;"	f	class:TextTokenizer
Scan_	file/textfile.cc	/^void TextTokenizer::Scan_(ArrayList<char> *token) {$/;"	f	class:TextTokenizer
SchurExpert	la/uselapack.cc	/^success_t la::SchurExpert(Matrix *A_in_T_out,$/;"	f	class:la
SchurInit	la/uselapack.h	/^  inline success_t SchurInit(const Matrix &A,$/;"	f	namespace:la
SegmentAppend	col/arraylist.h	/^void ArrayList<TElem>::SegmentAppend(index_t size, ArrayList *dest) {$/;"	f	class:ArrayList
SegmentInit	col/arraylist.h	/^  void SegmentInit(index_t size, Elem *dest) {$/;"	f	class:ArrayList
SegmentInit	col/arraylist.h	/^void ArrayList<TElem>::SegmentInit(index_t size, ArrayList *dest) {$/;"	f	class:ArrayList
SelectFindBoundFromMatrix	tree/kdtree_impl.h	/^    void SelectFindBoundFromMatrix(const GenMatrix<T>& matrix,$/;"	f	namespace:tree_kdtree_private
SelectMatrixPartition	tree/kdtree_impl.h	/^  index_t SelectMatrixPartition(GenMatrix<T>& matrix, $/;"	f	namespace:tree_kdtree_private
SelectSplitKdTreeMidpoint	tree/kdtree_impl.h	/^    void SelectSplitKdTreeMidpoint(GenMatrix<T>& matrix,$/;"	f	namespace:tree_kdtree_private
SemiCopy	base/otrav.h	/^  inline T *SemiCopy(char *block, const T *orig) {$/;"	f	namespace:ot
SemiCopy	base/otrav.h	/^  inline T *SemiCopy(char *block, const char *orig) {$/;"	f	namespace:ot
SemiDestruct	base/otrav.h	/^  inline void SemiDestruct(T *obj) {$/;"	f	namespace:ot
SemiDestruct	base/otrav.h	/^  inline void SemiDestruct(char *block) {$/;"	f	namespace:ot
SemiFreeze	base/otrav.h	/^  inline void SemiFreeze(char *block, const T *orig) {$/;"	f	namespace:ot
SemiFreeze	base/otrav.h	/^  void SemiFreeze(char *block, const char *orig) {$/;"	f	namespace:ot
SemiFreezeDestruct	base/otrav.h	/^  inline char *SemiFreezeDestruct(T *obj) {$/;"	f	namespace:ot
SemiFreezeDestruct	base/otrav.h	/^  inline char *SemiFreezeDestruct(char *block) {$/;"	f	namespace:ot
SemiThaw	base/otrav.h	/^  inline T *SemiThaw(char *block) {$/;"	f	namespace:ot
SerialSize	base/otrav.h	/^  inline size_t SerialSize(const T &obj) {$/;"	f	namespace:ot
Serialize	base/otrav.h	/^  inline size_t Serialize(const T &obj, FILE *stream) {$/;"	f	namespace:ot
Serializer	base/otrav_impl.h	/^    Serializer(const T &obj, FILE *stream) {$/;"	f	class:ot__private::Serializer
Serializer	base/otrav_impl.h	/^  class Serializer {$/;"	c	namespace:ot__private
Set	par/thread.h	/^  void Set(int v) {$/;"	f	class:ValueCondition
SetAll	la/matrix.h	/^  void SetAll(T d) {$/;"	f	class:GenMatrix
SetAll	la/matrix.h	/^  void SetAll(T d) {$/;"	f	class:GenVector
SetDiagonal	la/matrix.h	/^  void SetDiagonal(const GenVector<T>& v) {$/;"	f	class:GenMatrix
SetLength	col/col_string.h	/^  void SetLength(index_t newlen) {$/;"	f	class:String
SetZero	la/matrix.h	/^  void SetZero() {$/;"	f	class:GenMatrix
SetZero	la/matrix.h	/^  void SetZero() {$/;"	f	class:GenVector
ShrinkTo	col/arraylist.h	/^  void ShrinkTo(index_t size) {$/;"	f	class:ArrayList
Sigmoid	math/statistics.cc	/^double Sigmoid(double x) {$/;"	f	namespace:math
Signal	par/thread.h	/^  void Signal() {$/;"	f	class:WaitCondition
SimpleCrossValidator	data/crossvalidation.h	/^  SimpleCrossValidator() {}$/;"	f	class:SimpleCrossValidator
SimpleCrossValidator	data/crossvalidation.h	/^class SimpleCrossValidator {$/;"	c
SizeAtLeast	col/arraylist.h	/^  void SizeAtLeast(index_t size) {$/;"	f	class:ArrayList
SizeAtMost	col/arraylist.h	/^  void SizeAtMost(index_t size) {$/;"	f	class:ArrayList
SkipBlanks_	data/dataset.cc	/^void DatasetInfo::SkipBlanks_(TextLineReader *reader) {$/;"	f	class:DatasetInfo
SkipNonspace_	data/dataset.cc	/^char *DatasetInfo::SkipNonspace_(char *s) {$/;"	f	class:DatasetInfo
SkipSpace_	data/dataset.cc	/^char *DatasetInfo::SkipSpace_(char *s) {$/;"	f	class:DatasetInfo
Skip_	file/textfile.cc	/^char TextTokenizer::Skip_(ArrayList<char> *token) {$/;"	f	class:TextTokenizer
SlabAllocator	col/fastalloc.h	/^class SlabAllocator {$/;"	c
SmallMatrix	la/matrix.h	/^  SmallMatrix() {$/;"	f	class:SmallMatrix
SmallMatrix	la/matrix.h	/^class SmallMatrix : public Matrix {$/;"	c
SmallVector	la/matrix.h	/^  SmallVector() {$/;"	f	class:SmallVector
SmallVector	la/matrix.h	/^class SmallVector : public Vector {$/;"	c
SolveExpert	la/uselapack.h	/^  inline success_t SolveExpert($/;"	f	namespace:la
SolveInit	la/uselapack.h	/^  inline success_t SolveInit(const Matrix &A, const Matrix &B, Matrix *X) {$/;"	f	namespace:la
SolveInit	la/uselapack.h	/^  inline success_t SolveInit(const Matrix &A, const Vector &b, Vector *x) {$/;"	f	namespace:la
SpawnThread	par/grain.h	/^  Thread *SpawnThread() {$/;"	f	class:ThreadedGrainRunner
SphereVolume	math/geometry.cc	/^  double SphereVolume(double r, int d) {$/;"	f	namespace:math
Split	col/col.cc	/^index_t String::Split(index_t start_index,$/;"	f	class:String
Split	col/col_string.h	/^  index_t Split(const char *delimeters, ArrayList<String> *result) const {$/;"	f	class:String
SplitKdTreeMidpoint	tree/kdtree_impl.h	/^  void SplitKdTreeMidpoint(GenMatrix<T>& matrix,$/;"	f	namespace:tree_kdtree_private
SplitTrainTest	data/dataset.cc	/^void Dataset::SplitTrainTest(int folds, int fold_number,$/;"	f	class:Dataset
Sqr	math/math_lib.h	/^  inline T Sqr(T v) {$/;"	f	namespace:math
StandardFormat	base/otrav_impl.h	/^    StandardFormat(FILE *stream) {$/;"	f	class:ot::StandardFormat
StandardFormat	base/otrav_impl.h	/^  class StandardFormat {$/;"	c	namespace:ot
Start	par/thread.h	/^  void Start() {$/;"	f	class:Thread
Start	par/thread.h	/^  void Start(int prio) {$/;"	f	class:Thread
StartsWith	col/col_string.h	/^  bool StartsWith(const char *s) const {$/;"	f	class:String
StaticCopy	la/matrix.h	/^  void StaticCopy(const GenMatrix& other) {$/;"	f	class:GenMatrix
StaticCopy	la/matrix.h	/^  void StaticCopy(const GenVector& other) {$/;"	f	class:GenVector
StaticCopy	la/matrix.h	/^  void StaticCopy(const T *doubles, index_t in_length) {$/;"	f	class:GenVector
StaticCopy	la/matrix.h	/^  void StaticCopy(const T *ptr_in, index_t n_rows_in, index_t n_cols_in) {$/;"	f	class:GenMatrix
StaticInit	la/matrix.h	/^  void StaticInit(index_t in_length) {$/;"	f	class:GenVector
StaticInit	la/matrix.h	/^  void StaticInit(index_t in_rows, index_t in_cols) {$/;"	f	class:GenMatrix
StaticInitDiagonal	la/matrix.h	/^  void StaticInitDiagonal(const GenVector<T>& v) {$/;"	f	class:GenMatrix
StaticOwn	la/matrix.h	/^  void StaticOwn(GenMatrix* other) {$/;"	f	class:GenMatrix
StaticOwn	la/matrix.h	/^  void StaticOwn(GenVector* other) {$/;"	f	class:GenVector
StaticOwn	la/matrix.h	/^  void StaticOwn(T *in_ptr, index_t in_length) {$/;"	f	class:GenVector
StaticOwn	la/matrix.h	/^  void StaticOwn(T *ptr_in, index_t n_rows_in, index_t n_cols_in) {$/;"	f	class:GenMatrix
Statistic	tree/spacetree.h	/^  typedef TStatistic Statistic;$/;"	t	class:BinarySpaceTree
Std	math/statistics.cc	/^double Std(Vector V) {$/;"	f	namespace:math
Steal	col/arraylist.h	/^  void Steal(ArrayList *other) {$/;"	f	class:ArrayList
Steal	col/arraylist.h	/^  void Steal(const Elem *src, index_t size) {$/;"	f	class:ArrayList
Steal	col/col_string.h	/^  void Steal(ArrayList<char> *null_terminated_char_list) {$/;"	f	class:String
Steal	col/col_string.h	/^  void Steal(char *str) {$/;"	f	class:String
Steal	col/col_string.h	/^  void Steal(char *str, index_t len) {$/;"	f	class:String
Steal	col/col_string.h	/^  void Steal(char *str, index_t len, index_t capacity) {$/;"	f	class:String
StealDestruct	col/col_string.h	/^  void StealDestruct(String *other) {$/;"	f	class:String
Str	base/otrav.cc	/^void ot::StandardFormat::Str(const char *name, index_t index,$/;"	f	class:ot::StandardFormat
Str	base/otrav.cc	/^void ot::XMLFormat::Str(const char *name, index_t index,$/;"	f	class:ot::XMLFormat
Str	base/otrav_impl.h	/^    void Str(char *&str, bool nullable, bool alloc) {$/;"	f	class:ot__private::Copier
Str	base/otrav_impl.h	/^    void Str(char *&str, bool nullable, bool alloc) {$/;"	f	class:ot__private::Deserializer
Str	base/otrav_impl.h	/^    void Str(char *&str, bool nullable, bool alloc) {$/;"	f	class:ot__private::Destructor
Str	base/otrav_impl.h	/^    void Str(char *&str, bool nullable, bool alloc) {$/;"	f	class:ot__private::Freezer
Str	base/otrav_impl.h	/^    void Str(char *&str, bool nullable, bool alloc) {$/;"	f	class:ot__private::Relocator
Str	base/otrav_impl.h	/^    void Str(char *&str, bool nullable, bool alloc) {$/;"	f	class:ot__private::Serializer
Str	base/otrav_impl.h	/^    void Str(char *&str, bool nullable, bool alloc) {$/;"	f	class:ot__private::TransientDestructor
Str	base/otrav_impl.h	/^    void Str(char *&str, bool nullable, bool alloc) {$/;"	f	class:ot__private::TransientUnstructor
Str	base/otrav_impl.h	/^    void Str(char *&str, bool nullable, bool alloc) {$/;"	f	class:ot__private::Unstructor
Str	base/otrav_impl.h	/^    void Str(char *&str, bool nullable, bool alloc) {}$/;"	f	class:ot__private::Aliaser
Str	base/otrav_impl.h	/^    void Str(const char *str, bool nullable, bool alloc) {$/;"	f	class:ot__private::Printer
StratifiedSplitCVSet_	data/crossvalidation.h	/^  void StratifiedSplitCVSet_(int i_fold, index_t num_classes, ArrayList<index_t>& cv_labels_ct, $/;"	f	class:GeneralCrossValidator
String	col/col_string.h	/^  String(const char *s) {$/;"	f	class:String
String	col/col_string.h	/^class String {$/;"	c
SubFrom	la/uselapack.h	/^  inline void SubFrom(const Matrix &X, Matrix *Y) {$/;"	f	namespace:la
SubFrom	la/uselapack.h	/^  inline void SubFrom(const Vector &x, Vector *y) {$/;"	f	namespace:la
SubFrom	la/uselapack.h	/^  inline void SubFrom(index_t length, const double *x, double *y) {$/;"	f	namespace:la
SubInit	la/uselapack.h	/^  inline void SubInit(const Matrix &X, const Matrix &Y, Matrix *Z) {$/;"	f	namespace:la
SubInit	la/uselapack.h	/^  inline void SubInit(const Vector &x, const Vector &y, Vector *z) {$/;"	f	namespace:la
SubOverwrite	la/uselapack.h	/^  inline void SubOverwrite(const Matrix &X, const Matrix &Y, Matrix *Z) {$/;"	f	namespace:la
SubOverwrite	la/uselapack.h	/^  inline void SubOverwrite(const Vector &x, const Vector &y, Vector *z) {$/;"	f	namespace:la
SubOverwrite	la/uselapack.h	/^  inline void SubOverwrite(index_t length,$/;"	f	namespace:la
Swap	base/ccmem.h	/^  inline void Swap(T *a, T *b) {$/;"	f	namespace:mem
Swap	base/ccmem.h	/^  inline void Swap(T *a, T *b, size_t elems) {$/;"	f	namespace:mem
Swap	base/ccmem.h	/^  inline void Swap(T *a, U *b) {$/;"	f	namespace:mem
Swap	base/ccmem.h	/^  inline void Swap(T *a, U *b, size_t elems) {$/;"	f	namespace:mem
Swap	base/deprecated.h	/^  inline T *Swap(T *a, T *b, size_t elems = 1) {$/;"	f	namespace:mem
Swap	col/arraylist.h	/^  void Swap(ArrayList *other) {$/;"	f	class:ArrayList
Swap	col/col_string.h	/^  void Swap(String* other) {$/;"	f	class:String
SwapBytes	base/ccmem.cc	/^void mem__private::SwapBytes(char *a_cp, char *b_cp, size_t bytes) {$/;"	f	class:mem__private
SwapBytes	base/ccmem.h	/^  void SwapBytes(T *a, U *b, size_t bytes) {$/;"	f	namespace:mem
SwapBytes	base/deprecated.h	/^  inline T *SwapBytes(T *a, T *b, size_t bytes) {$/;"	f	namespace:mem
SwapValues	la/matrix.h	/^  void SwapValues(GenMatrix* other) {$/;"	f	class:GenMatrix
SwapValues	la/matrix.h	/^  void SwapValues(GenVector* other) {$/;"	f	class:GenVector
TEST_ASSERT	base/test.h	51;"	d
TEST_DOUBLE_APPROX	base/test.h	58;"	d
TEST_DOUBLE_EXACT	base/test.h	54;"	d
TEST_SUITE_BEGIN	base/test.h	67;"	d
TEST_SUITE_END	base/test.h	76;"	d
TREE_BOUNDS_H	tree/bounds.h	46;"	d
TREE_KDTREE_H	tree/kdtree.h	46;"	d
TREE_SPACETREE_H	tree/spacetree.h	43;"	d
TREE_STATISTIC_H	tree/statistic.h	45;"	d
Task	par/task.h	/^  Task() {}$/;"	f	class:Task
Task	par/task.h	/^class Task {$/;"	c
Terminate	col/col_string.h	/^  void Terminate() {$/;"	f	class:String
Test2	file/textfile_test.cc	/^void Test2() {$/;"	f
TestArrayListInt	col/col_test.cc	/^void TestArrayListInt() {$/;"	f
TestBallBound	tree/tree_test.cc	/^void TestBallBound() {$/;"	f
TestCholesky	la/uselapack_test.cc	/^void TestCholesky() {$/;"	f
TestCopy	otrav_test.cc	/^void TestCopy() {$/;"	f
TestDatasetLayout	otrav_test.cc	/^void TestDatasetLayout() {$/;"	f
TestDatasetPrint	otrav_test.cc	/^void TestDatasetPrint() {$/;"	f
TestDeterminant	la/uselapack_test.cc	/^void TestDeterminant() {$/;"	f
TestEigen	la/uselapack_test.cc	/^void TestEigen() {$/;"	f
TestFastAlloc	col/col_test.cc	/^void TestFastAlloc() {$/;"	f
TestIntMap	col/col_test.cc	/^void TestIntMap() {$/;"	f
TestInverse	la/uselapack_test.cc	/^void TestInverse() {$/;"	f
TestLeastSquareFit	la/uselapack_test.cc	/^void TestLeastSquareFit() {$/;"	f
TestLoad	data/dataset_test.cc	/^void TestLoad() {$/;"	f
TestMatrix	la/uselapack_test.cc	/^void TestMatrix() {$/;"	f
TestMatrixSimpleMath	la/uselapack_test.cc	/^void TestMatrixSimpleMath() {$/;"	f
TestMinHeap	col/col_test.cc	/^void TestMinHeap() {$/;"	f
TestMultiply	la/uselapack_test.cc	/^void TestMultiply() {$/;"	f
TestQR	la/uselapack_test.cc	/^void TestQR() {$/;"	f
TestQueue	col/col_test.cc	/^void TestQueue() {$/;"	f
TestRangeSet	col/col_test.cc	/^void TestRangeSet() {$/;"	f
TestSVD	la/uselapack_test.cc	/^void TestSVD() {$/;"	f
TestSchur	la/uselapack_test.cc	/^void TestSchur() {$/;"	f
TestSolve	la/uselapack_test.cc	/^void TestSolve() {$/;"	f
TestSplitTrainTest	data/dataset_test.cc	/^void TestSplitTrainTest() {$/;"	f
TestStoreLoad	data/dataset_test.cc	/^void TestStoreLoad() {$/;"	f
TestVector	la/uselapack_test.cc	/^void TestVector() {$/;"	f
TestVectorDot	la/uselapack_test.cc	/^void TestVectorDot() {$/;"	f
TestVectorSimpleMath	la/uselapack_test.cc	/^void TestVectorSimpleMath() {$/;"	f
TextLineReader	file/textfile.h	/^  TextLineReader() {$/;"	f	class:TextLineReader
TextLineReader	file/textfile.h	/^class TextLineReader {$/;"	c
TextTokenizer	file/textfile.h	/^  TextTokenizer() {$/;"	f	class:TextTokenizer
TextTokenizer	file/textfile.h	/^class TextTokenizer {$/;"	c
TextWriter	file/textfile.h	/^  TextWriter() {$/;"	f	class:TextWriter
TextWriter	file/textfile.h	/^class TextWriter {$/;"	c
Thread	par/thread.h	/^  Thread() {$/;"	f	class:Thread
Thread	par/thread.h	/^class Thread {$/;"	c
ThreadMain_	par/thread.h	/^  static void *ThreadMain_(void *self) {$/;"	f	class:Thread
ThreadTask	par/grain.h	/^    ThreadTask(ThreadedGrainRunner *runner_in) {$/;"	f	struct:ThreadedGrainRunner::ThreadTask
ThreadTask	par/grain.h	/^  struct ThreadTask : public Task {$/;"	s	class:ThreadedGrainRunner
ThreadedGrainRunner	par/grain.h	/^  ThreadedGrainRunner() {}$/;"	f	class:ThreadedGrainRunner
ThreadedGrainRunner	par/grain.h	/^class ThreadedGrainRunner {$/;"	c
TokenType	file/textfile.h	/^  enum TokenType {$/;"	g	class:TextTokenizer
Trace	la/la.h	/^  inline double Trace(Matrix &a) {$/;"	f	namespace:la
TransientDestructor	base/otrav_impl.h	/^    TransientDestructor(T *obj) {$/;"	f	class:ot__private::TransientDestructor
TransientDestructor	base/otrav_impl.h	/^  class TransientDestructor {$/;"	c	namespace:ot__private
TransientUnstructor	base/otrav_impl.h	/^    TransientUnstructor(T *obj) {$/;"	f	class:ot__private::TransientUnstructor
TransientUnstructor	base/otrav_impl.h	/^  class TransientUnstructor {$/;"	c	namespace:ot__private
TransposeInit	la/uselapack.h	/^  inline void TransposeInit(const Matrix &X, Matrix *Y) {$/;"	f	namespace:la
TransposeOverwrite	la/uselapack.h	/^  inline void TransposeOverwrite(const Matrix &X, Matrix *Y) {$/;"	f	namespace:la
TransposeSquare	la/uselapack.h	/^  inline void TransposeSquare(Matrix *X) {$/;"	f	namespace:la
Trim	col/arraylist.h	/^  void Trim() {$/;"	f	class:ArrayList
Trim	col/col.cc	/^void String::Trim(const char *delimeters, String *result) const {$/;"	f	class:String
Trim	col/col_string.h	/^  void Trim()$/;"	f	class:String
TrimLeft	col/col.cc	/^void String::TrimLeft(const char *delimeters, String *result) const {$/;"	f	class:String
TrimRight	col/col.cc	/^void String::TrimRight(const char *delimeters, String *result) const {$/;"	f	class:String
Truncate	col/col_string.h	/^  void Truncate(const char *s) {$/;"	f	class:String
Truncate	col/col_string.h	/^  void Truncate(index_t newlen) {$/;"	f	class:String
TryCholesky	la/uselapack_test.cc	/^void TryCholesky(const Matrix &orig) {$/;"	f
TryLock	par/thread.h	/^  bool TryLock() const {$/;"	f	class:Mutex
TrySVD	la/uselapack_test.cc	/^void TrySVD(const Matrix& orig) {$/;"	f
TrySchur	la/uselapack_test.cc	/^void TrySchur(const Matrix &orig) {$/;"	f
TrySolveMatrix	la/uselapack_test.cc	/^void TrySolveMatrix(const Matrix& a, const Matrix& b) {$/;"	f
TrySolveVector	la/uselapack_test.cc	/^void TrySolveVector(const Matrix& a, const Vector& b) {$/;"	f
Type	data/dataset.h	/^  enum Type {$/;"	g	class:DatasetFeature
UNINIT	par/thread.h	/^  enum {UNINIT, READY, ATTACHED, DETACHED, DONE} status_;$/;"	e	enum:Thread::__anon18
USE_BLAS_L1	la/uselapack.h	64;"	d
USE_LAPACK	la/uselapack.h	63;"	d
USE_LAPACK	la/uselapack.h	69;"	d
UndoNextChar_	file/textfile.cc	/^void TextTokenizer::UndoNextChar_(ArrayList<char> *token) {$/;"	f	class:TextTokenizer
Unget_	file/textfile.h	/^  void Unget_(int c) {$/;"	f	class:TextTokenizer
Uninitialize_	la/matrix.h	/^  void Uninitialize_() {$/;"	f	class:GenMatrix
Uninitialize_	la/matrix.h	/^  void Uninitialize_() {$/;"	f	class:GenVector
Union	col/rangeset.h	/^void RangeSet<TBoundary>::Union($/;"	f	class:RangeSet
Unlock	par/thread.h	/^  void Unlock() const {$/;"	f	class:Mutex
Unstructor	base/otrav_impl.h	/^    Unstructor(T *obj) {$/;"	f	class:ot__private::Unstructor
Unstructor	base/otrav_impl.h	/^  class Unstructor {$/;"	c	namespace:ot__private
Untraversed	base/otrav.cc	/^void ot::StandardFormat::Untraversed(const unsigned char *obj_cp,$/;"	f	class:ot::StandardFormat
Untraversed	base/otrav.cc	/^void ot::XMLFormat::Untraversed(const unsigned char *obj_cp,$/;"	f	class:ot::XMLFormat
Untraversed	base/otrav_impl.h	/^    void Untraversed(T &obj) {$/;"	f	class:ot__private::Aliaser
Untraversed	base/otrav_impl.h	/^    void Untraversed(T &obj) {$/;"	f	class:ot__private::Copier
Untraversed	base/otrav_impl.h	/^    void Untraversed(T &obj) {$/;"	f	class:ot__private::Deserializer
Untraversed	base/otrav_impl.h	/^    void Untraversed(T &obj) {$/;"	f	class:ot__private::Freezer
Untraversed	base/otrav_impl.h	/^    void Untraversed(T &obj) {$/;"	f	class:ot__private::Printer
Untraversed	base/otrav_impl.h	/^    void Untraversed(T &obj) {$/;"	f	class:ot__private::Serializer
Untraversed	base/otrav_impl.h	/^    void Untraversed(T &obj) {}$/;"	f	class:ot__private::Destructor
Untraversed	base/otrav_impl.h	/^    void Untraversed(T &obj) {}$/;"	f	class:ot__private::Relocator
Untraversed	base/otrav_impl.h	/^    void Untraversed(T &obj) {}$/;"	f	class:ot__private::TransientDestructor
Untraversed	base/otrav_impl.h	/^    void Untraversed(T &obj) {}$/;"	f	class:ot__private::TransientUnstructor
Untraversed	base/otrav_impl.h	/^    void Untraversed(T &obj) {}$/;"	f	class:ot__private::Unstructor
VERBOSE_GOT_HERE	base/debug.h	142;"	d
VERBOSE_MSG	base/debug.h	127;"	d
VERBOSE_ONLY	base/debug.h	82;"	d
VERBOSE_ONLY	base/debug.h	84;"	d
Value	col/heap.h	/^  typedef TValue Value;$/;"	t	class:MinHeap
Value	col/intmap.h	/^  typedef TValue Value;$/;"	t	class:DenseIntMap
Value	math/math_lib.h	/^  typedef TValue Value;$/;"	t	class:MinMaxVal
ValueCondition	par/thread.h	/^  ValueCondition() { value_ = 0; }$/;"	f	class:ValueCondition
ValueCondition	par/thread.h	/^class ValueCondition {$/;"	c
Var	math/statistics.cc	/^double Var(Vector V) {$/;"	f	namespace:math
Vector	la/matrix.h	/^typedef GenVector<double> Vector;$/;"	t
VectorApproxEqual	la/uselapack_test.cc	/^bool VectorApproxEqual(const Vector& a, const Vector& b,$/;"	f
WANT_NEWLINE	file/textfile.h	/^    WANT_NEWLINE = 0x01$/;"	e	enum:TextTokenizer::Features
Wait	par/thread.h	/^  void Wait() {$/;"	f	class:DoneCondition
Wait	par/thread.h	/^  void Wait(Mutex* mutex_to_unlock) {$/;"	f	class:WaitCondition
Wait	par/thread.h	/^  void Wait(int v) {$/;"	f	class:ValueCondition
WaitCondition	par/thread.h	/^  WaitCondition() {$/;"	f	class:WaitCondition
WaitCondition	par/thread.h	/^class WaitCondition {$/;"	c
WaitMillis	par/thread.h	/^  void WaitMillis(Mutex& mutex_to_unlock, unsigned millis) {$/;"	f	class:WaitCondition
WaitNot	par/thread.h	/^  void WaitNot(int v) {$/;"	f	class:ValueCondition
WaitSec	par/thread.h	/^  void WaitSec(Mutex& mutex_to_unlock, unsigned sec) {$/;"	f	class:WaitCondition
WaitStop	par/thread.h	/^  void WaitStop() {$/;"	f	class:Thread
WalkDown_	col/heap.h	/^  index_t WalkDown_(const Entry& entry, index_t i) {$/;"	f	class:MinHeap
WalkUp_	col/heap.h	/^  index_t WalkUp_(const Entry& entry, index_t i) {$/;"	f	class:MinHeap
WeakCopy	la/matrix.h	/^  void WeakCopy(const GenMatrix& other) {$/;"	f	class:GenMatrix
WeakCopy	la/matrix.h	/^  void WeakCopy(const GenVector& other) {$/;"	f	class:GenVector
Write	file/textfile.h	/^  success_t Write(const char *s) {$/;"	f	class:TextWriter
Write	file/textfile.h	/^  success_t Write(double d) {$/;"	f	class:TextWriter
Write	file/textfile.h	/^  success_t Write(int i) {$/;"	f	class:TextWriter
Write	file/textfile.h	/^  success_t Write(long i) {$/;"	f	class:TextWriter
Write	file/textfile.h	/^  success_t Write(long long i) {$/;"	f	class:TextWriter
Write	file/textfile.h	/^  success_t Write(unsigned int i) {$/;"	f	class:TextWriter
Write	file/textfile.h	/^  success_t Write(unsigned long i) {$/;"	f	class:TextWriter
Write	file/textfile.h	/^  success_t Write(unsigned long long i) {$/;"	f	class:TextWriter
WriteArff	data/dataset.cc	/^success_t Dataset::WriteArff(const char *fname) const {$/;"	f	class:Dataset
WriteArffHeader	data/dataset.cc	/^void DatasetInfo::WriteArffHeader(TextWriter *writer) const {$/;"	f	class:DatasetInfo
WriteCsv	data/dataset.cc	/^success_t Dataset::WriteCsv(const char *fname, bool header) const {$/;"	f	class:Dataset
WriteCsvHeader	data/dataset.cc	/^void DatasetInfo::WriteCsvHeader(const char *sep, TextWriter *writer) const {$/;"	f	class:DatasetInfo
WriteMatrix	data/dataset.cc	/^void DatasetInfo::WriteMatrix(const Matrix& matrix, const char *sep,$/;"	f	class:DatasetInfo
Write_	base/otrav_impl.h	/^    void Write_(T *val, index_t elems = 1) {$/;"	f	class:ot__private::Serializer
XMLFormat	base/otrav_impl.h	/^    XMLFormat(FILE *stream) {$/;"	f	class:ot::XMLFormat
XMLFormat	base/otrav_impl.h	/^  class XMLFormat {$/;"	c	namespace:ot
XML_FORMAT__PRIMITIVE	base/otrav.cc	216;"	d	file:
XML_FORMAT__PRIMITIVE	base/otrav.cc	237;"	d	file:
XML_FORMAT__PRIMITIVE	base/otrav_impl.h	236;"	d
XML_FORMAT__PRIMITIVE	base/otrav_impl.h	243;"	d
ZPowAbsImpl	math/math_lib_impl.h	/^  struct ZPowAbsImpl<t_numerator, t_denominator, false> {$/;"	s	namespace:math__private
ZPowAbsImpl	math/math_lib_impl.h	/^  struct ZPowAbsImpl<t_numerator, t_denominator, true> {$/;"	s	namespace:math__private
ZPowImpl	math/math_lib_impl.h	/^  struct ZPowImpl {$/;"	s	namespace:math__private
ZPowImpl	math/math_lib_impl.h	/^  struct ZPowImpl<0, t_denominator> {$/;"	s	namespace:math__private
ZPowImpl	math/math_lib_impl.h	/^  struct ZPowImpl<1, 1> {$/;"	s	namespace:math__private
ZPowImpl	math/math_lib_impl.h	/^  struct ZPowImpl<1, 2> {$/;"	s	namespace:math__private
ZPowImpl	math/math_lib_impl.h	/^  struct ZPowImpl<1, 3> {$/;"	s	namespace:math__private
ZPowImpl	math/math_lib_impl.h	/^  struct ZPowImpl<t_equal, t_equal> {$/;"	s	namespace:math__private
ZPowImpl	math/math_lib_impl.h	/^  struct ZPowImpl<t_numerator, 1> {$/;"	s	namespace:math__private
Zero	base/ccmem.h	/^  inline T *Zero(T *array, size_t elems = 1) {$/;"	f	namespace:mem
Zero	base/deprecated.h	/^  inline T *Zero(T *array, size_t elems = 1) {$/;"	f	namespace:mem
ZeroBytes	base/ccmem.h	/^  inline T *ZeroBytes(T *array, size_t bytes) {$/;"	f	namespace:mem
ZeroBytes	base/deprecated.h	/^  inline T *ZeroBytes(T *array, size_t bytes) {$/;"	f	namespace:mem
_REENTRANT	base/common.h	52;"	d
a	col/col_test.cc	/^  int a;$/;"	m	struct:MyStruct	file:
abort_on_nonfatal	base/common.c	/^int abort_on_nonfatal = 0;$/;"	v
array_	base/otrav_impl.h	/^    ptrdiff_t array_;$/;"	m	class:ot__private::Printer
array_	col/col_string.h	/^  ArrayList<char> array_;$/;"	m	class:String
array_	la/matrix.h	/^  double array_[t_cols][t_rows];$/;"	m	class:SmallMatrix
array_	la/matrix.h	/^  double array_[t_length];$/;"	m	class:SmallVector
b	col/col_test.cc	/^  int b;$/;"	m	struct:MyStruct	file:
back	col/arraylist.h	/^  Elem &back() {$/;"	f	class:ArrayList
back	col/arraylist.h	/^  const Elem &back() const {$/;"	f	class:ArrayList
bandwidth_sq	math/kernel.h	/^  double bandwidth_sq() const {$/;"	f	class:EpanKernel
bandwidth_sq	math/kernel.h	/^  double bandwidth_sq() const {$/;"	f	class:GaussianKernel
bandwidth_sq	math/kernel.h	/^  double bandwidth_sq() const {$/;"	f	class:GaussianStarKernel
bandwidth_sq_	math/kernel.h	/^  double bandwidth_sq_;$/;"	m	class:EpanKernel
bandwidth_sq_	math/kernel.h	/^  double bandwidth_sq_;$/;"	m	class:GaussianKernel
bandwidth_sq_	math/kernel.h	/^  double bandwidth_sq_;$/;"	m	class:GaussianStarKernel
begin	col/arraylist.h	/^  Elem* begin() {$/;"	f	class:ArrayList
begin	col/arraylist.h	/^  const Elem *begin() const {$/;"	f	class:ArrayList
begin	col/col_string.h	/^  char* begin()$/;"	f	class:String
begin	col/col_string.h	/^  const char* begin() const   $/;"	f	class:String
begin	col/rangeset.h	/^    Boundary begin;$/;"	m	struct:RangeSet::Range
begin	tree/spacetree.h	/^  index_t begin() const {$/;"	f	class:BinarySpaceTree
begin_	tree/spacetree.h	/^  index_t begin_;$/;"	m	class:BinarySpaceTree
block_	base/otrav_impl.h	/^    char *block_;$/;"	m	class:ot__private::Freezer
block_	base/otrav_impl.h	/^    const char *block_;$/;"	m	class:ot__private::Relocator
bound	tree/spacetree.h	/^  Bound& bound() {$/;"	f	class:BinarySpaceTree
bound	tree/spacetree.h	/^  const Bound& bound() const {$/;"	f	class:BinarySpaceTree
bound_	tree/spacetree.h	/^  Bound bound_;$/;"	m	class:BinarySpaceTree
bounds_	tree/bounds.h	/^  DRange *bounds_;$/;"	m	class:DHrectBound
c	base/compiler.h	/^  struct S {T x; char c;};$/;"	m	struct:compiler_strideof::S
c_str	col/col_string.h	/^  char* c_str()$/;"	f	class:String
c_str	col/col_string.h	/^  const char* c_str() const$/;"	f	class:String
cap_	col/arraylist.h	/^  index_t cap_;  \/\/ allocated size of the array; -1 if alias$/;"	m	class:ArrayList
capacity	col/arraylist.h	/^  index_t capacity() const {$/;"	f	class:ArrayList
cc__private	base/cc.cc	/^namespace cc__private {$/;"	n	file:
center	tree/bounds.h	/^  TPoint& center() {$/;"	f	class:DBallBound
center	tree/bounds.h	/^  const TPoint& center() const {$/;"	f	class:DBallBound
center_	tree/bounds.h	/^  TPoint center_;$/;"	m	class:DBallBound
classifier_fx_name_	data/crossvalidation.h	/^  const char *classifier_fx_name_;$/;"	m	class:SimpleCrossValidator
clsf_confusion_matrix	data/crossvalidation.h	/^  const Matrix& clsf_confusion_matrix() const {$/;"	f	class:GeneralCrossValidator
clsf_confusion_matrix_	data/crossvalidation.h	/^  Matrix clsf_confusion_matrix_;$/;"	m	class:GeneralCrossValidator
clsf_n_classes_	data/crossvalidation.h	/^  int clsf_n_classes_;$/;"	m	class:GeneralCrossValidator
clsf_n_correct	data/crossvalidation.h	/^  index_t clsf_n_correct() {$/;"	f	class:GeneralCrossValidator
clsf_n_correct_	data/crossvalidation.h	/^  index_t clsf_n_correct_;$/;"	m	class:GeneralCrossValidator
clsf_n_incorrect	data/crossvalidation.h	/^  index_t clsf_n_incorrect() {$/;"	f	class:GeneralCrossValidator
clsf_portion_correct	data/crossvalidation.h	/^  double clsf_portion_correct() {$/;"	f	class:GeneralCrossValidator
comment_start_	file/textfile.h	/^  const char *comment_start_;$/;"	m	class:TextTokenizer
compiler_strideof	base/compiler.h	/^struct compiler_strideof {$/;"	s
cond_	par/thread.h	/^  WaitCondition cond_;$/;"	m	class:DoneCondition
cond_	par/thread.h	/^  WaitCondition cond_;$/;"	m	class:ValueCondition
cond_	par/thread.h	/^  pthread_cond_t cond_;$/;"	m	class:WaitCondition
config_doit	base/build.py	/^def config_doit(sysentry, files, params):$/;"	f
confusion_matrix	data/crossvalidation.h	/^  const Matrix& confusion_matrix() const {$/;"	f	class:SimpleCrossValidator
confusion_matrix_	data/crossvalidation.h	/^  Matrix confusion_matrix_;$/;"	m	class:SimpleCrossValidator
context_	par/grain.h	/^  Context context_;$/;"	m	class:ThreadedGrainRunner
count	tree/spacetree.h	/^  index_t count() const {$/;"	f	class:BinarySpaceTree
count_	tree/spacetree.h	/^  index_t count_;$/;"	m	class:BinarySpaceTree
cpu	fx/stopwatch.h	/^  struct tms cpu;$/;"	m	struct:timestamp	typeref:struct:timestamp::tms
critical_point_sq_	math/kernel.h	/^  double critical_point_sq_;$/;"	m	class:GaussianStarKernel
critical_point_value_	math/kernel.h	/^  double critical_point_value_;$/;"	m	class:GaussianStarKernel
cur_	file/textfile.h	/^  String cur_;$/;"	m	class:TextTokenizer
cur_type_	file/textfile.h	/^  TokenType cur_type_;$/;"	m	class:TextTokenizer
cycles	fx/stopwatch.h	/^  tsc_t cycles;$/;"	m	struct:timestamp
data	col/queue.h	/^    T data;$/;"	m	struct:Queue::Node
data	data/crossvalidation.h	/^  const Dataset& data() const {$/;"	f	class:GeneralCrossValidator
data	data/crossvalidation.h	/^  const Dataset& data() const {$/;"	f	class:SimpleCrossValidator
data	data/dataset.h	/^namespace data {$/;"	n
data_	data/crossvalidation.h	/^  const Dataset *data_;$/;"	m	class:GeneralCrossValidator
data_	data/crossvalidation.h	/^  const Dataset *data_;$/;"	m	class:SimpleCrossValidator
datanode	fx/datanode.h	/^struct datanode {$/;"	s
datanode__exists_impl	fx/datanode.c	/^static int datanode__exists_impl(struct datanode *node)$/;"	f	file:
datanode__reset	fx/datanode.c	/^static void datanode__reset(struct datanode *node)$/;"	f	file:
datanode__write_path	fx/datanode.c	/^static void datanode__write_path(struct datanode *node, FILE *stream)$/;"	f	file:
datanode_copy	fx/datanode.c	/^void datanode_copy(struct datanode *dest, struct datanode *src,$/;"	f
datanode_destroy	fx/datanode.c	/^void datanode_destroy(struct datanode *node)$/;"	f
datanode_exists	fx/datanode.c	/^int datanode_exists(struct datanode *node, const char *path)$/;"	f
datanode_init	fx/datanode.c	/^void datanode_init(struct datanode *node, const char *key)$/;"	f
datanode_lookup	fx/datanode.c	/^struct datanode *datanode_lookup(struct datanode *node, const char *path,$/;"	f
datanode_lookup_expert	fx/datanode.c	/^struct datanode *datanode_lookup_expert(struct datanode *node, char *path,$/;"	f
datanode_read	fx/datanode.c	/^void datanode_read(struct datanode *node, FILE *stream,$/;"	f
datanode_write	fx/datanode.c	/^void datanode_write(struct datanode *node, FILE *stream,$/;"	f
debug_verbosity	base/deprecated.h	59;"	d
default_value	col/intmap.h	/^  Value& default_value() {$/;"	f	class:DenseIntMap
default_value	col/intmap.h	/^  const Value& default_value() const {$/;"	f	class:DenseIntMap
default_value_	col/intmap.h	/^  Value default_value_;$/;"	m	class:DenseIntMap
dgeqrf_block_size	la/uselapack.cc	/^int la::dgeqrf_block_size;$/;"	m	class:la	file:
dgeqrf_dorgqr_block_size	la/uselapack.cc	/^int la::dgeqrf_dorgqr_block_size;$/;"	m	class:la	file:
dgetri_block_size	la/uselapack.cc	/^int la::dgetri_block_size;$/;"	m	class:la	file:
dim	tree/bounds.h	/^  index_t dim() const {$/;"	f	class:DHrectBound
dim_	tree/bounds.h	/^  index_t dim_;$/;"	m	class:DHrectBound
doc	fx/fx.h	/^  const struct fx_module_doc *doc;$/;"	m	struct:fx_submodule_doc	typeref:struct:fx_submodule_doc::fx_module_doc
done_	par/thread.h	/^  bool done_;$/;"	m	class:DoneCondition
dorgqr_block_size	la/uselapack.cc	/^int la::dorgqr_block_size;$/;"	m	class:la	file:
empty	col/arraylist.h	/^  bool empty() const {$/;"	f	class:ArrayList
end	col/arraylist.h	/^  Elem *end() {$/;"	f	class:ArrayList
end	col/arraylist.h	/^  const Elem *end() const {$/;"	f	class:ArrayList
end	col/col_string.h	/^  char *end() {$/;"	f	class:String
end	col/col_string.h	/^  const char *end() const {$/;"	f	class:String
end	col/rangeset.h	/^    Boundary end;$/;"	m	struct:RangeSet::Range
end	tree/spacetree.h	/^  index_t end() const {$/;"	f	class:BinarySpaceTree
entries	fx/fx.h	/^  const struct fx_entry_doc *entries;$/;"	m	struct:fx_module_doc	typeref:struct:fx_module_doc::fx_entry_doc
entries_	col/heap.h	/^  ArrayList<Entry> entries_;$/;"	m	class:MinHeap
expect	base/compiler.h	86;"	d
expect	base/compiler.h	88;"	d
f77_complex	base/fortran.h	/^} f77_complex;$/;"	t	typeref:struct:__anon14
f77_double	base/fortran.h	/^typedef double f77_double;$/;"	t
f77_double_func	base/fortran.h	/^typedef f77_ret_double (*f77_double_func)( F77_UNKNOWN_ARGS );$/;"	t
f77_doublecomplex	base/fortran.h	/^} f77_doublecomplex;$/;"	t	typeref:struct:__anon15
f77_integer	base/fortran.h	/^typedef int f77_integer;$/;"	t
f77_integer_func	base/fortran.h	/^typedef f77_ret_integer (*f77_integer_func)( F77_UNKNOWN_ARGS );$/;"	t
f77_logical	base/fortran.h	/^typedef unsigned int f77_logical;$/;"	t
f77_logical_func	base/fortran.h	/^typedef f77_ret_logical (*f77_logical_func)( F77_UNKNOWN_ARGS );$/;"	t
f77_real	base/fortran.h	/^typedef float f77_real;$/;"	t
f77_real_func	base/fortran.h	/^typedef f77_ret_real (*f77_real_func)( F77_UNKNOWN_ARGS );$/;"	t
f77_ret_double	base/fortran.h	/^typedef f77_double f77_ret_double;$/;"	t
f77_ret_integer	base/fortran.h	/^typedef f77_integer f77_ret_integer;$/;"	t
f77_ret_logical	base/fortran.h	/^typedef f77_logical f77_ret_logical;$/;"	t
f77_ret_real	base/fortran.h	/^typedef f77_double f77_ret_real;$/;"	t
f77_ret_void	base/fortran.h	/^typedef int f77_ret_void;$/;"	t
f77_str_len	base/fortran.h	/^typedef long f77_str_len;$/;"	t
f_	file/textfile.h	/^  FILE *f_;$/;"	m	class:TextLineReader
f_	file/textfile.h	/^  FILE *f_;$/;"	m	class:TextTokenizer
f_	file/textfile.h	/^  FILE *f_;$/;"	m	class:TextWriter
factor_	math/kernel.h	/^  double factor_;$/;"	m	class:GaussianStarKernel
fast_delete	col/fastalloc.h	/^inline void fast_delete(T *ptr) {$/;"	f
fast_new	col/fastalloc.h	124;"	d
feature	data/dataset.h	/^  const DatasetFeature& feature(index_t attrib_num) const {$/;"	f	class:DatasetInfo
features	data/dataset.h	/^  ArrayList<DatasetFeature>& features() {$/;"	f	class:DatasetInfo
features_	data/dataset.h	/^  ArrayList<DatasetFeature> features_;$/;"	m	class:DatasetInfo
features_	file/textfile.h	/^  int features_;$/;"	m	class:TextTokenizer
first_child	fx/datanode.h	/^  struct datanode *first_child;$/;"	m	struct:datanode	typeref:struct:datanode::datanode
fl_abort	base/common.c	/^void fl_abort(void)$/;"	f
fl_msg_color	base/common.c	/^const char *fl_msg_color[] =$/;"	v
fl_msg_marker	base/common.c	/^char fl_msg_marker[] = {'X', '!', '*', '.'};$/;"	v
fl_msg_t	base/common.h	/^} fl_msg_t;$/;"	t	typeref:enum:__anon1
fl_pause	base/common.c	/^void fl_pause(void)$/;"	f
fl_print_fatal_msg	base/common.c	/^void fl_print_fatal_msg(const char *file, const char *func, int line,$/;"	f
fl_print_msg	base/common.c	/^void fl_print_msg(const char *file, const char *func, int line,$/;"	f
fl_print_msg_header	base/common.c	/^void fl_print_msg_header(char marker, const char *color)$/;"	f
fl_print_msg_loc	base/common.c	/^void fl_print_msg_loc(const char *file, const char *func, int line)$/;"	f
fl_print_progress	base/common.c	/^void fl_print_progress(const char *desc, int prec)$/;"	f
format_	base/otrav_impl.h	/^    TPrintFormat format_;$/;"	m	class:ot__private::Printer
freelist_	col/fastalloc.h	/^  static char *freelist_;$/;"	m	class:SlabAllocator
freelist_	col/fastalloc.h	/^char *SlabAllocator<item_size>::freelist_ = 0;$/;"	m	class:SlabAllocator
front	col/arraylist.h	/^  Elem &front() {$/;"	f	class:ArrayList
front	col/arraylist.h	/^  const Elem &front() const {$/;"	f	class:ArrayList
fx__alloc_bool	fx/fx.c	/^static char *fx__alloc_bool(int val)$/;"	f	file:
fx__alloc_bool_array	fx/fx.c	/^static char *fx__alloc_bool_array(size_t size, const int *list)$/;"	f	file:
fx__alloc_bool_list	fx/fx.c	/^static char *fx__alloc_bool_list(size_t size, va_list vl)$/;"	f	file:
fx__alloc_double	fx/fx.c	/^static char *fx__alloc_double(double val)$/;"	f	file:
fx__alloc_double_array	fx/fx.c	/^static char *fx__alloc_double_array(size_t size, const double *list)$/;"	f	file:
fx__alloc_double_list	fx/fx.c	/^static char *fx__alloc_double_list(size_t size, va_list vl)$/;"	f	file:
fx__alloc_format	fx/fx.c	/^static char *fx__alloc_format(const char *format, va_list vl)$/;"	f	file:
fx__alloc_format_list	fx/fx.c	/^static char *fx__alloc_format_list(size_t size, va_list vl)$/;"	f	file:
fx__alloc_int	fx/fx.c	/^static char *fx__alloc_int(long long val)$/;"	f	file:
fx__alloc_int_array	fx/fx.c	/^static char *fx__alloc_int_array(size_t size, const long long *list)$/;"	f	file:
fx__alloc_int_list	fx/fx.c	/^static char *fx__alloc_int_list(size_t size, va_list vl)$/;"	f	file:
fx__alloc_str_array	fx/fx.c	/^static char *fx__alloc_str_array(size_t size, const char *const *list)$/;"	f	file:
fx__alloc_str_list	fx/fx.c	/^static char *fx__alloc_str_list(size_t size, va_list vl)$/;"	f	file:
fx__attempt_speedup	fx/fx.c	/^static void fx__attempt_speedup(fx_module *root)$/;"	f	file:
fx__check_inputs	fx/fx.c	/^static success_t fx__check_inputs(fx_module *mod)$/;"	f	file:
fx__check_lookup	fx/fx.c	/^static void fx__check_lookup(fx_mod_t mod_type, fx_val_t val_type,$/;"	f	file:
fx__check_mod_type	fx/fx.c	/^static success_t fx__check_mod_type(const char *header, fx_mod_t mod_type,$/;"	f	file:
fx__check_param	fx/fx.c	/^static success_t fx__check_param(fx_module *param)$/;"	f	file:
fx__check_val_type	fx/fx.c	/^static success_t fx__check_val_type(const char *header, fx_val_t val_type,$/;"	f	file:
fx__debug_doc	fx/fx.c	/^const fx_module_doc fx__debug_doc = {$/;"	v
fx__debug_entries	fx/fx.c	/^const fx_entry_doc fx__debug_entries[] = {$/;"	v
fx__fill_docs	fx/fx.c	/^static void fx__fill_docs(fx_module *mod, const fx_module_doc *doc)$/;"	f	file:
fx__fx_doc	fx/fx.c	/^const fx_module_doc fx__fx_doc = {$/;"	v
fx__fx_entries	fx/fx.c	/^const fx_entry_doc fx__fx_entries[] = {$/;"	v
fx__get_entry	fx/fx.c	/^static fx_module *fx__get_entry(fx_module *mod, const char *key,$/;"	f	file:
fx__get_result	fx/fx.c	/^static fx_module *fx__get_result(fx_module *mod, const char *key,$/;"	f	file:
fx__info_doc	fx/fx.c	/^const fx_module_doc fx__info_doc = {$/;"	v
fx__info_entries	fx/fx.c	/^const fx_entry_doc fx__info_entries[] = {$/;"	v
fx__info_submods	fx/fx.c	/^const fx_submodule_doc fx__info_submods[] = {$/;"	v
fx__list_size	fx/fx.c	/^static size_t fx__list_size(fx_module *entry, size_t req_size,$/;"	f	file:
fx__load_param_files	fx/fx.c	/^static void fx__load_param_files(fx_module *root)$/;"	f	file:
fx__lookup	fx/fx.c	/^static fx_module *fx__lookup(fx_module *mod, const char *key)$/;"	f	file:
fx__match_prefix	fx/fx.c	/^static const char *fx__match_prefix(const char *key, const char *prefix)$/;"	f	file:
fx__output_results	fx/fx.c	/^static void fx__output_results(fx_module *root)$/;"	f	file:
fx__param	fx/fx.c	/^static fx_module *fx__param(fx_module *mod, const char *key,$/;"	f	file:
fx__param_req	fx/fx.c	/^static fx_module *fx__param_req(fx_module *mod, const char *key,$/;"	f	file:
fx__parse_cmd_line	fx/fx.c	/^static void fx__parse_cmd_line(fx_module *root, int argc, char *argv[])$/;"	f	file:
fx__print_fatal_msg	fx/fx.c	/^static void fx__print_fatal_msg(const char *file, const char *func, int line,$/;"	f	file:
fx__print_msg	fx/fx.c	/^static void fx__print_msg(const char *file, const char *func, int line,$/;"	f	file:
fx__read_debug_params	fx/fx.c	/^static void fx__read_debug_params(fx_module *debug)$/;"	f	file:
fx__report_rusage	fx/fx.c	/^static void fx__report_rusage(fx_module *mod, int usage_type)$/;"	f	file:
fx__report_sys	fx/fx.c	/^static void fx__report_sys(fx_module *sys)$/;"	f	file:
fx__rusage_doc	fx/fx.c	/^const fx_module_doc fx__rusage_doc = {$/;"	v
fx__rusage_entries	fx/fx.c	/^const fx_entry_doc fx__rusage_entries[] = {$/;"	v
fx__scan_bool	fx/fx.c	/^static int fx__scan_bool(fx_module *entry)$/;"	f	file:
fx__scan_bool_impl	fx/fx.c	/^static int fx__scan_bool_impl(fx_module *entry, const char *val,$/;"	f	file:
fx__scan_bool_list	fx/fx.c	/^static int *fx__scan_bool_list(fx_module *mod, size_t *size_ptr,$/;"	f	file:
fx__scan_double	fx/fx.c	/^static double fx__scan_double(fx_module *entry)$/;"	f	file:
fx__scan_double_impl	fx/fx.c	/^static double fx__scan_double_impl(fx_module *entry, const char *val,$/;"	f	file:
fx__scan_double_list	fx/fx.c	/^static double *fx__scan_double_list(fx_module *mod, size_t *size_ptr,$/;"	f	file:
fx__scan_int	fx/fx.c	/^static long long fx__scan_int(fx_module *entry)$/;"	f	file:
fx__scan_int_impl	fx/fx.c	/^static long long fx__scan_int_impl(fx_module *entry, const char *val,$/;"	f	file:
fx__scan_int_list	fx/fx.c	/^static long long *fx__scan_int_list(fx_module *mod, size_t *size_ptr,$/;"	f	file:
fx__scan_str_list	fx/fx.c	/^static const char **fx__scan_str_list(fx_module *mod, size_t *size_ptr,$/;"	f	file:
fx__std_doc	fx/fx.c	/^const fx_module_doc fx__std_doc = {$/;"	v
fx__std_entries	fx/fx.c	/^const fx_entry_doc fx__std_entries[] = {$/;"	v
fx__std_help	fx/fx.c	/^static void fx__std_help(const char *prog, const char *help,$/;"	f	file:
fx__std_submods	fx/fx.c	/^const fx_submodule_doc fx__std_submods[] = {$/;"	v
fx__stop_timers	fx/fx.c	/^static void fx__stop_timers(fx_module *mod, struct timestamp *now)$/;"	f	file:
fx__timer_doc	fx/fx.c	/^const fx_module_doc fx__timer_doc = {$/;"	v
fx__timer_double	fx/fx.c	/^static void fx__timer_double(fx_module *mod, const char *key, double val)$/;"	f	file:
fx__timer_entries	fx/fx.c	/^const fx_entry_doc fx__timer_entries[] = {$/;"	v
fx__timer_int	fx/fx.c	/^static void fx__timer_int(fx_module *mod, const char *key, long long val)$/;"	f	file:
fx__write_path	fx/fx.c	/^static void fx__write_path(fx_module *entry, FILE *stream)$/;"	f	file:
fx_clear_param	fx/fx.c	/^void fx_clear_param(fx_module *mod, const char *key)$/;"	f
fx_clear_result	fx/fx.c	/^void fx_clear_result(fx_module *mod, const char *key)$/;"	f
fx_copy_module	fx/fx.c	/^fx_module *fx_copy_module(fx_module *mod, const char *src_key,$/;"	f
fx_default_param	fx/fx.c	/^void fx_default_param(fx_module *mod, const char *key,$/;"	f
fx_default_param_list	fx/fx.c	/^void fx_default_param_list(fx_module *mod, const char *key,$/;"	f
fx_docs_nagging	fx/fx.c	/^int fx_docs_nagging = 1;$/;"	v
fx_done	fx/fx.c	/^void fx_done(fx_module *root)$/;"	f
fx_entry_doc	fx/fx.h	/^typedef struct fx_entry_doc {$/;"	s
fx_entry_doc	fx/fx.h	/^} fx_entry_doc;$/;"	t	typeref:struct:fx_entry_doc
fx_format_param	fx/fx.c	/^void fx_format_param(fx_module *mod, const char *key,$/;"	f
fx_format_param_list	fx/fx.c	/^void fx_format_param_list(fx_module *mod, const char *key,$/;"	f
fx_format_result	fx/fx.c	/^void fx_format_result(fx_module *mod, const char *key,$/;"	f
fx_format_result_list	fx/fx.c	/^void fx_format_result_list(fx_module *mod, const char *key,$/;"	f
fx_get_result_bool	fx/fx.c	/^int fx_get_result_bool(fx_module *mod, const char *key)$/;"	f
fx_get_result_bool_list	fx/fx.c	/^int *fx_get_result_bool_list(fx_module *mod, const char *key,$/;"	f
fx_get_result_double	fx/fx.c	/^double fx_get_result_double(fx_module *mod, const char *key)$/;"	f
fx_get_result_double_list	fx/fx.c	/^double *fx_get_result_double_list(fx_module *mod, const char *key,$/;"	f
fx_get_result_int	fx/fx.c	/^long long fx_get_result_int(fx_module *mod, const char *key)$/;"	f
fx_get_result_int_list	fx/fx.c	/^long long *fx_get_result_int_list(fx_module *mod, const char *key,$/;"	f
fx_get_result_str	fx/fx.c	/^const char *fx_get_result_str(fx_module *mod, const char *key)$/;"	f
fx_get_result_str_list	fx/fx.c	/^const char **fx_get_result_str_list(fx_module *mod, const char *key,$/;"	f
fx_get_timer	fx/fx.c	/^fx_timer *fx_get_timer(fx_module *mod, const char *key) {$/;"	f
fx_help	fx/fx.c	/^success_t fx_help(const fx_module_doc *doc, const char *key)$/;"	f
fx_init	fx/fx.c	/^fx_module *fx_init(int argc, char *argv[], const fx_module_doc *doc)$/;"	f
fx_mod_marker	fx/fx.c	/^char fx_mod_marker[] = "UMPQVPDRT";$/;"	v
fx_mod_name	fx/fx.c	/^const char *fx_mod_name[] = {$/;"	v
fx_mod_t	fx/fx.h	/^} fx_mod_t;$/;"	t	typeref:enum:__anon19
fx_module	fx/fx.h	/^typedef struct datanode fx_module;$/;"	t	typeref:struct:datanode
fx_module_doc	fx/fx.h	/^typedef struct fx_module_doc {$/;"	s
fx_module_doc	fx/fx.h	/^} fx_module_doc;$/;"	t	typeref:struct:fx_module_doc
fx_module_is_type	fx/fx.c	/^int fx_module_is_type(fx_module *entry, fx_mod_t mod_type)$/;"	f
fx_param_bool	fx/fx.c	/^int fx_param_bool(fx_module *mod, const char *key, int def)$/;"	f
fx_param_bool_array	fx/fx.c	/^int *fx_param_bool_array(fx_module *mod, const char *key,$/;"	f
fx_param_bool_list	fx/fx.c	/^int *fx_param_bool_list(fx_module *mod, const char *key,$/;"	f
fx_param_bool_list_req	fx/fx.c	/^int *fx_param_bool_list_req(fx_module *mod, const char *key,$/;"	f
fx_param_bool_req	fx/fx.c	/^int fx_param_bool_req(fx_module *mod, const char *key)$/;"	f
fx_param_double	fx/fx.c	/^double fx_param_double(fx_module *mod, const char *key, double def)$/;"	f
fx_param_double_array	fx/fx.c	/^double *fx_param_double_array(fx_module *mod, const char *key,$/;"	f
fx_param_double_list	fx/fx.c	/^double *fx_param_double_list(fx_module *mod, const char *key,$/;"	f
fx_param_double_list_req	fx/fx.c	/^double *fx_param_double_list_req(fx_module *mod, const char *key,$/;"	f
fx_param_double_req	fx/fx.c	/^double fx_param_double_req(fx_module *mod, const char *key)$/;"	f
fx_param_exists	fx/fx.c	/^int fx_param_exists(fx_module *mod, const char *key)$/;"	f
fx_param_int	fx/fx.c	/^long long fx_param_int(fx_module *mod, const char *key, long long def)$/;"	f
fx_param_int_array	fx/fx.c	/^long long *fx_param_int_array(fx_module *mod, const char *key,$/;"	f
fx_param_int_list	fx/fx.c	/^long long *fx_param_int_list(fx_module *mod, const char *key,$/;"	f
fx_param_int_list_req	fx/fx.c	/^long long *fx_param_int_list_req(fx_module *mod, const char *key,$/;"	f
fx_param_int_req	fx/fx.c	/^long long fx_param_int_req(fx_module *mod, const char *key)$/;"	f
fx_param_str	fx/fx.c	/^const char *fx_param_str(fx_module *mod, const char *key, const char *def)$/;"	f
fx_param_str_array	fx/fx.c	/^const char **fx_param_str_array(fx_module *mod, const char *key,$/;"	f
fx_param_str_list	fx/fx.c	/^const char **fx_param_str_list(fx_module *mod, const char *key,$/;"	f
fx_param_str_list_req	fx/fx.c	/^const char **fx_param_str_list_req(fx_module *mod, const char *key,$/;"	f
fx_param_str_req	fx/fx.c	/^const char *fx_param_str_req(fx_module *mod, const char *key)$/;"	f
fx_reset_timer	fx/fx.c	/^void fx_reset_timer(fx_module *mod, const char *key)$/;"	f
fx_result_bool	fx/fx.c	/^void fx_result_bool(fx_module *mod, const char *key, int val)$/;"	f
fx_result_bool_array	fx/fx.c	/^void fx_result_bool_array(fx_module *mod, const char *key,$/;"	f
fx_result_bool_list	fx/fx.c	/^void fx_result_bool_list(fx_module *mod, const char *key,$/;"	f
fx_result_double	fx/fx.c	/^void fx_result_double(fx_module *mod, const char *key, double val)$/;"	f
fx_result_double_array	fx/fx.c	/^void fx_result_double_array(fx_module *mod, const char *key,$/;"	f
fx_result_double_list	fx/fx.c	/^void fx_result_double_list(fx_module *mod, const char *key,$/;"	f
fx_result_exists	fx/fx.c	/^int fx_result_exists(fx_module *mod, const char *key)$/;"	f
fx_result_int	fx/fx.c	/^void fx_result_int(fx_module *mod, const char *key, long long val)$/;"	f
fx_result_int_array	fx/fx.c	/^void fx_result_int_array(fx_module *mod, const char *key,$/;"	f
fx_result_int_list	fx/fx.c	/^void fx_result_int_list(fx_module *mod, const char *key,$/;"	f
fx_result_str	fx/fx.c	/^void fx_result_str(fx_module *mod, const char *key, const char *val)$/;"	f
fx_result_str_array	fx/fx.c	/^void fx_result_str_array(fx_module *mod, const char *key,$/;"	f
fx_result_str_list	fx/fx.c	/^void fx_result_str_list(fx_module *mod, const char *key,$/;"	f
fx_root	fx/fx.c	/^fx_module *fx_root = NULL;$/;"	v
fx_set_param_bool	fx/fx.c	/^void fx_set_param_bool(fx_module *mod, const char *key, int val)$/;"	f
fx_set_param_bool_array	fx/fx.c	/^void fx_set_param_bool_array(fx_module *mod, const char *key,$/;"	f
fx_set_param_bool_list	fx/fx.c	/^void fx_set_param_bool_list(fx_module *mod, const char *key,$/;"	f
fx_set_param_double	fx/fx.c	/^void fx_set_param_double(fx_module *mod, const char *key, double val)$/;"	f
fx_set_param_double_array	fx/fx.c	/^void fx_set_param_double_array(fx_module *mod, const char *key,$/;"	f
fx_set_param_double_list	fx/fx.c	/^void fx_set_param_double_list(fx_module *mod, const char *key,$/;"	f
fx_set_param_int	fx/fx.c	/^void fx_set_param_int(fx_module *mod, const char *key, long long val)$/;"	f
fx_set_param_int_array	fx/fx.c	/^void fx_set_param_int_array(fx_module *mod, const char *key,$/;"	f
fx_set_param_int_list	fx/fx.c	/^void fx_set_param_int_list(fx_module *mod, const char *key,$/;"	f
fx_set_param_str	fx/fx.c	/^void fx_set_param_str(fx_module *mod, const char *key, const char *val)$/;"	f
fx_set_param_str_array	fx/fx.c	/^void fx_set_param_str_array(fx_module *mod, const char *key,$/;"	f
fx_set_param_str_list	fx/fx.c	/^void fx_set_param_str_list(fx_module *mod, const char *key,$/;"	f
fx_submodule	fx/fx.c	/^fx_module *fx_submodule(fx_module *mod, const char *key)$/;"	f
fx_submodule_doc	fx/fx.h	/^typedef struct fx_submodule_doc {$/;"	s
fx_submodule_doc	fx/fx.h	/^} fx_submodule_doc;$/;"	t	typeref:struct:fx_submodule_doc
fx_timer	fx/fx.h	/^typedef struct stopwatch fx_timer;$/;"	t	typeref:struct:stopwatch
fx_timer_start	fx/fx.c	/^void fx_timer_start(fx_module *mod, const char *key)$/;"	f
fx_timer_stop	fx/fx.c	/^void fx_timer_stop(fx_module *mod, const char *key)$/;"	f
fx_val_name	fx/fx.c	/^const char *fx_val_name[] = {$/;"	v
fx_val_t	fx/fx.h	/^} fx_val_t;$/;"	t	typeref:enum:__anon20
gen_compile_complex_lapack	la/build.py	/^def gen_compile_complex_lapack(sysentry, files, params):$/;"	f
gen_compile_lapack	la/build.py	/^def gen_compile_lapack(sysentry, files, params):$/;"	f
get	col/intmap.h	/^  const Value& get(index_t index) const {$/;"	f	class:DenseIntMap
get	data/dataset.h	/^  double get(index_t feature, index_t point) const {$/;"	f	class:Dataset
get	la/matrix.h	/^  T get(index_t i) const {$/;"	f	class:GenVector
get	la/matrix.h	/^  T get(index_t r, index_t c) const {$/;"	f	class:GenMatrix
get	la/matrix.h	/^  double get(index_t i) const {$/;"	f	class:SmallVector
get	la/matrix.h	/^  double get(index_t r, index_t c) const {$/;"	f	class:SmallMatrix
get	tree/bounds.h	/^  const DRange& get(index_t i) const {$/;"	f	class:DHrectBound
get_int	data/dataset.h	/^  int get_int(index_t feature, index_t point) const {$/;"	f	class:Dataset
global	par/thread.cc	/^Mutex Mutex::global;$/;"	m	class:Mutex	file:
global	par/thread.h	/^  static Mutex global;$/;"	m	class:Mutex
has_line_	file/textfile.h	/^  bool has_line_;$/;"	m	class:TextLineReader
head_	col/queue.h	/^  Node *head_;$/;"	m	class:Queue
hex_to_stream	base/common.c	/^void hex_to_stream(FILE *stream, const char *src, const char *ok_char)$/;"	f
hex_to_string	base/common.c	/^char *hex_to_string(char *dest, const char *src, const char *ok_char)$/;"	f
hi	math/math_lib.h	/^  double hi;$/;"	m	struct:DRange
ident_extra_	file/textfile.h	/^  const char *ident_extra_;$/;"	m	class:TextTokenizer
im	base/fortran.h	/^  f77_double im;$/;"	m	struct:__anon15
im	base/fortran.h	/^  f77_real im;$/;"	m	struct:__anon14
indent_	base/otrav_impl.h	/^    int indent_;$/;"	m	class:ot::StandardFormat
indent_	base/otrav_impl.h	/^    int indent_;$/;"	m	class:ot::XMLFormat
index_	base/otrav_impl.h	/^    index_t index_;$/;"	m	class:ot__private::Printer
index_t	base/common.h	/^typedef int64 index_t;          \/* For larger than RAM data sets. *\/$/;"	t
info	data/dataset.h	/^  DatasetInfo& info() {$/;"	f	class:Dataset
info	data/dataset.h	/^  const DatasetInfo& info() const {$/;"	f	class:Dataset
info_	data/dataset.h	/^  DatasetInfo info_;$/;"	m	class:Dataset
inform_debug	base/cc.cc	/^  InformDebug inform_debug;$/;"	v
interpolate	math/math_lib.h	/^  double interpolate(double factor) const {$/;"	f	struct:DRange
inv_bandwidth_sq	math/kernel.h	/^  double inv_bandwidth_sq() const {$/;"	f	class:EpanKernel
inv_bandwidth_sq_	math/kernel.h	/^  double inv_bandwidth_sq_;$/;"	m	class:EpanKernel
is_all_continuous	data/dataset.cc	/^bool DatasetInfo::is_all_continuous() const {$/;"	f	class:DatasetInfo
is_empty	col/col_string.h	/^  bool is_empty() const$/;"	f	class:String
is_empty	col/heap.h	/^  bool is_empty() const {$/;"	f	class:MinHeap
is_empty	col/queue.h	/^  bool is_empty() const {$/;"	f	class:Queue
is_leaf	tree/spacetree.h	/^  bool is_leaf() const {$/;"	f	class:BinarySpaceTree
isident_begin_	file/textfile.h	/^  bool isident_begin_(int c) const {$/;"	f	class:TextTokenizer
isident_rest_	file/textfile.h	/^  bool isident_rest_(int c) const {$/;"	f	class:TextTokenizer
key	col/heap.h	/^    TKey key;$/;"	m	struct:MinHeap::Entry
key	fx/datanode.h	/^  char *key;$/;"	m	struct:datanode
key	fx/fx.h	/^  const char *key;$/;"	m	struct:fx_entry_doc
key	fx/fx.h	/^  const char *key;$/;"	m	struct:fx_submodule_doc
kfold_module_	data/crossvalidation.h	/^  datanode *kfold_module_;$/;"	m	class:GeneralCrossValidator
kfold_module_	data/crossvalidation.h	/^  datanode *kfold_module_;$/;"	m	class:SimpleCrossValidator
la	la/blas.h	/^namespace la {$/;"	n
la	la/clapack.h	/^namespace la {$/;"	n
la	la/la.h	/^namespace la {$/;"	n
la	la/uselapack.cc	/^namespace la {$/;"	n	file:
la	la/uselapack.h	/^namespace la {$/;"	n
lapack_initializer	la/uselapack.cc	/^static la::zzzLapackInit lapack_initializer;$/;"	v	file:
last_child	fx/datanode.h	/^  struct datanode *last_child;$/;"	m	struct:datanode	typeref:struct:datanode::datanode
learner_fx_name_	data/crossvalidation.h	/^  const char *learner_fx_name_;$/;"	m	class:GeneralCrossValidator
learner_typeid_	data/crossvalidation.h	/^  int learner_typeid_;$/;"	m	class:GeneralCrossValidator
left	tree/spacetree.h	/^  BinarySpaceTree *left() const {$/;"	f	class:BinarySpaceTree
left_	tree/spacetree.h	/^  BinarySpaceTree *left_;$/;"	m	class:BinarySpaceTree
length	col/arraylist.h	/^  index_t length() const {$/;"	f	class:ArrayList
length	col/col_string.h	/^  index_t length() const$/;"	f	class:String
length	la/matrix.h	/^  index_t length() const {$/;"	f	class:GenVector
length	la/matrix.h	/^  index_t length() const {$/;"	f	class:SmallVector
length_	la/matrix.h	/^  index_t length_;$/;"	m	class:GenVector
likely	base/compiler.h	109;"	d
line	file/textfile.h	/^  int line() const {$/;"	f	class:TextTokenizer
line_	file/textfile.h	/^  String line_;$/;"	m	class:TextLineReader
line_	file/textfile.h	/^  int line_;$/;"	m	class:TextTokenizer
line_num	file/textfile.h	/^  int line_num() const {$/;"	f	class:TextLineReader
line_num_	file/textfile.h	/^  int line_num_;$/;"	m	class:TextLineReader
lo	math/math_lib.h	/^  double lo;$/;"	m	struct:DRange
main	base/config/template_types.c	/^int main(int argc, char *argv[]) {$/;"	f
make_blas	la/build.py	/^def make_blas(sysentry, files, params):$/;"	f
make_lapack	la/build.py	/^def make_lapack(sysentry, files, params):$/;"	f
math	math/discrete.h	/^namespace math {$/;"	n
math	math/geometry.cc	/^namespace math {$/;"	n	file:
math	math/geometry.h	/^namespace math {$/;"	n
math	math/math_lib.h	/^namespace math {$/;"	n
math	math/statistics.cc	/^namespace math {$/;"	n	file:
math	math/statistics.h	/^namespace math {$/;"	n
math__private	math/math_lib_impl.h	/^namespace math__private {$/;"	n
matrix	data/dataset.h	/^  Matrix& matrix() {$/;"	f	class:Dataset
matrix	data/dataset.h	/^  const Matrix& matrix() const {$/;"	f	class:Dataset
matrix_	data/dataset.h	/^  Matrix matrix_;$/;"	m	class:Dataset
mem	base/ccmem.h	/^namespace mem {$/;"	n
mem	base/deprecated.h	/^namespace mem {$/;"	n
mem__private	base/ccmem.h	/^namespace mem__private {$/;"	n
meta	fx/datanode.h	/^  const char *meta;$/;"	m	struct:datanode
meta	fx/fx.h	/^  const char *meta;$/;"	m	struct:fx_entry_doc
micros	fx/stopwatch.h	/^  tsc_t micros;$/;"	m	struct:timestamp
mid	math/math_lib.h	/^  double mid() const {$/;"	f	struct:DRange
mod_type	fx/datanode.h	/^  int mod_type;$/;"	m	struct:datanode
mod_type	fx/fx.h	/^  fx_mod_t mod_type;$/;"	m	struct:fx_entry_doc
msq_err_all_folds_	data/crossvalidation.h	/^  double msq_err_all_folds_;$/;"	m	class:GeneralCrossValidator
mutex_	par/grain.h	/^  Mutex mutex_;$/;"	m	class:GrainQueue
mutex_	par/thread.h	/^  Mutex mutex_;$/;"	m	class:DoneCondition
mutex_	par/thread.h	/^  Mutex mutex_;$/;"	m	class:ValueCondition
mutex_	par/thread.h	/^  mutable pthread_mutex_t mutex_;$/;"	m	class:Mutex
n_classes_	data/crossvalidation.h	/^  int n_classes_;$/;"	m	class:SimpleCrossValidator
n_cols	la/matrix.h	/^  index_t n_cols() const {$/;"	f	class:GenMatrix
n_cols	la/matrix.h	/^  index_t n_cols() const {$/;"	f	class:SmallMatrix
n_cols_	la/matrix.h	/^  index_t n_cols_;$/;"	m	class:GenMatrix
n_correct	data/crossvalidation.h	/^  index_t n_correct() {$/;"	f	class:SimpleCrossValidator
n_correct_	data/crossvalidation.h	/^  index_t n_correct_;$/;"	m	class:SimpleCrossValidator
n_elements	la/matrix.h	/^  size_t n_elements() const {$/;"	f	class:GenMatrix
n_elements	la/matrix.h	/^  size_t n_elements() const {$/;"	f	class:SmallMatrix
n_features	data/dataset.h	/^  index_t n_features() const {$/;"	f	class:Dataset
n_features	data/dataset.h	/^  index_t n_features() const {$/;"	f	class:DatasetInfo
n_folds_	data/crossvalidation.h	/^  int n_folds_;$/;"	m	class:GeneralCrossValidator
n_folds_	data/crossvalidation.h	/^  int n_folds_;$/;"	m	class:SimpleCrossValidator
n_incorrect	data/crossvalidation.h	/^  index_t n_incorrect() {$/;"	f	class:SimpleCrossValidator
n_labels	data/dataset.cc	/^index_t Dataset::n_labels() const {$/;"	f	class:Dataset
n_points	data/dataset.h	/^  index_t n_points() const {$/;"	f	class:Dataset
n_rows	la/matrix.h	/^  index_t n_rows() const {$/;"	f	class:GenMatrix
n_rows	la/matrix.h	/^  index_t n_rows() const {$/;"	f	class:SmallMatrix
n_rows_	la/matrix.h	/^  index_t n_rows_;$/;"	m	class:GenMatrix
n_values	data/dataset.h	/^  index_t n_values() const {$/;"	f	class:DatasetFeature
name	data/dataset.h	/^  const String& name() const {$/;"	f	class:DatasetFeature
name	data/dataset.h	/^  const char *name() const {$/;"	f	class:DatasetInfo
name_	base/otrav_impl.h	/^    const char *name_;$/;"	m	class:ot__private::Printer
name_	data/dataset.h	/^  String name_;$/;"	m	class:DatasetFeature
name_	data/dataset.h	/^  String name_;$/;"	m	class:DatasetInfo
neg_inv_bandwidth_2sq_	math/kernel.h	/^  double neg_inv_bandwidth_2sq_;$/;"	m	class:GaussianKernel
neg_inv_bandwidth_2sq_	math/kernel.h	/^  double neg_inv_bandwidth_2sq_;$/;"	m	class:GaussianStarKernel
next	col/col_test.cc	/^  MyStruct *next;$/;"	m	struct:MyStruct	file:
next	col/queue.h	/^    Node *next;$/;"	m	struct:Queue::Node
next	fx/datanode.h	/^  struct datanode *next;$/;"	m	struct:datanode	typeref:struct:datanode::datanode
next_	file/textfile.h	/^  String next_;$/;"	m	class:TextTokenizer
next_type_	file/textfile.h	/^  TokenType next_type_;$/;"	m	class:TextTokenizer
num_data_points_	data/crossvalidation.h	/^  index_t num_data_points_;$/;"	m	class:GeneralCrossValidator
offset_	base/otrav_impl.h	/^    ptrdiff_t offset_;$/;"	m	class:ot__private::Copier
offset_	base/otrav_impl.h	/^    ptrdiff_t offset_;$/;"	m	class:ot__private::Relocator
offsetof	base/compiler.h	312;"	d
operator &=	math/math_lib.h	/^  const DRange& operator &= (const DRange& other) {$/;"	f	struct:DRange
operator &=	math/math_lib.h	/^  const DRange& operator &= (double d) {$/;"	f	struct:DRange
operator *	math/math_lib.h	/^  friend DRange operator * (const DRange& r, double d) {$/;"	f	struct:DRange
operator *	math/math_lib.h	/^  friend DRange operator * (double d, const DRange& r) {$/;"	f	struct:DRange
operator *=	math/math_lib.h	/^  const DRange& operator *= (double d) {$/;"	f	struct:DRange
operator +	math/math_lib.h	/^  friend DRange operator + (const DRange& a, const DRange& b) {$/;"	f	struct:DRange
operator +	math/math_lib.h	/^  friend DRange operator + (const DRange& a, double b) {$/;"	f	struct:DRange
operator +=	col/col_string.h	/^  const String& operator += (char c) {$/;"	f	class:String
operator +=	col/col_string.h	/^  const String& operator += (const String& o) {$/;"	f	class:String
operator +=	col/col_string.h	/^  const String& operator += (const char *s) {$/;"	f	class:String
operator +=	math/math_lib.h	/^  const DRange& operator += (const DRange& other) {$/;"	f	struct:DRange
operator +=	math/math_lib.h	/^  const DRange& operator += (double d) {$/;"	f	struct:DRange
operator -	math/math_lib.h	/^  friend DRange operator - (const DRange& a, const DRange& b) {$/;"	f	struct:DRange
operator -	math/math_lib.h	/^  friend DRange operator - (const DRange& a, double b) {$/;"	f	struct:DRange
operator -	math/math_lib.h	/^  friend DRange operator - (const DRange& r) {$/;"	f	struct:DRange
operator -=	math/math_lib.h	/^  const DRange& operator -= (const DRange& other) {$/;"	f	struct:DRange
operator -=	math/math_lib.h	/^  const DRange& operator -= (double d) {$/;"	f	struct:DRange
operator <	col/col_string.h	/^  friend bool operator < (char a, const String& b) {$/;"	f	class:String
operator <	col/col_string.h	/^  friend bool operator < (const String& a, char b) {$/;"	f	class:String
operator <	col/col_string.h	/^  friend bool operator < (const String& a, const String& b) {$/;"	f	class:String
operator <	col/col_string.h	/^  friend bool operator < (const String& a, const char *b) {$/;"	f	class:String
operator <	col/col_string.h	/^  friend bool operator < (const char *a, const String& b) {$/;"	f	class:String
operator <	math/math_lib.h	/^  friend bool operator < (const DRange& a, const DRange& b) {$/;"	f	struct:DRange
operator <	math/math_lib.h	/^  friend bool operator < (const DRange& a, double b) {$/;"	f	struct:DRange
operator <	math/math_lib.h	/^  friend bool operator < (double a, const DRange& b) {$/;"	f	struct:DRange
operator =	math/math_lib.h	/^  const Value& operator = (Value val_in) {$/;"	f	class:MinMaxVal
operator ==	col/col_string.h	/^  friend bool operator == (const String& a, char b) {$/;"	f	class:String
operator ==	col/col_string.h	/^  friend bool operator == (const String& a, const String& b) {$/;"	f	class:String
operator ==	col/col_string.h	/^  friend bool operator == (const String& a, const char *b) {$/;"	f	class:String
operator ==	math/math_lib.h	/^  friend bool operator == (const DRange& a, const DRange& b) {$/;"	f	struct:DRange
operator Value	math/math_lib.h	/^  operator Value() const { return val; }$/;"	f	class:MinMaxVal
operator []	col/arraylist.h	/^  Elem &operator[] (index_t i) {$/;"	f	class:ArrayList
operator []	col/arraylist.h	/^  const Elem &operator[] (index_t i) const {$/;"	f	class:ArrayList
operator []	col/col_string.h	/^  char operator [] (index_t index) const$/;"	f	class:String
operator []	col/col_string.h	/^  char& operator [] (index_t index)$/;"	f	class:String
operator []	col/intmap.h	/^  Value& operator [] (index_t index) {$/;"	f	class:DenseIntMap
operator []	col/intmap.h	/^  const Value& operator [] (index_t index) const {$/;"	f	class:DenseIntMap
operator []	col/rangeset.h	/^  const Range& operator[] (index_t i) const {$/;"	f	class:RangeSet
operator []	la/matrix.h	/^  T &operator [] (index_t i) {$/;"	f	class:GenVector
operator []	la/matrix.h	/^  T operator [] (index_t i) const {$/;"	f	class:GenVector
operator []	la/matrix.h	/^  double &operator [] (index_t i) {$/;"	f	class:SmallVector
operator []	la/matrix.h	/^  double operator [] (index_t i) const {$/;"	f	class:SmallVector
operator const char *	col/col_string.h	/^  operator const char * () const$/;"	f	class:String
operator |=	math/math_lib.h	/^  const DRange& operator |= (const DRange& other) {$/;"	f	struct:DRange
operator |=	math/math_lib.h	/^  const DRange& operator |= (double d) {$/;"	f	struct:DRange
operator |=	tree/bounds.h	/^  DHrectBound& operator |= (const DHrectBound& other) {$/;"	f	class:DHrectBound
operator |=	tree/bounds.h	/^  DHrectBound& operator |= (const Vector& vector) {$/;"	f	class:DHrectBound
orig_	base/otrav_impl.h	/^    const char *orig_;$/;"	m	class:ot__private::Relocator
ot	base/otrav.h	/^namespace ot {$/;"	n
ot	base/otrav_impl.h	/^namespace ot {$/;"	n
ot__private	base/otrav_impl.h	/^namespace ot__private {$/;"	n
parent	fx/datanode.h	/^  struct datanode *parent;$/;"	m	struct:datanode	typeref:struct:datanode::datanode
pause_on_nonfatal	base/common.c	/^int pause_on_nonfatal = 0;$/;"	v
percent_indicator	base/deprecated.h	/^void percent_indicator(const char *name, uint64 num, uint64 den) {$/;"	f
point	data/dataset.h	/^  const double *point(index_t point) const {$/;"	f	class:Dataset
point	data/dataset.h	/^  double *point(index_t point) {$/;"	f	class:Dataset
poison_ptr	base/debug.h	/^const T *poison_ptr(T *&x) {$/;"	f
poison_ptr	base/debug.h	271;"	d
portion_correct	data/crossvalidation.h	/^  double portion_correct() {$/;"	f	class:SimpleCrossValidator
pos_	base/otrav_impl.h	/^    size_t pos_;$/;"	m	class:ot__private::Freezer
print_got_heres	base/debug.c	/^int print_got_heres = 1;$/;"	v
print_notify_headers	base/deprecated.h	45;"	d
print_notify_locs	base/common.c	/^int print_notify_locs = 0;$/;"	v
print_warnings	base/debug.c	/^int print_warnings = 1;$/;"	v
ptr	la/matrix.h	/^  T *ptr() {$/;"	f	class:GenMatrix
ptr	la/matrix.h	/^  T *ptr() {$/;"	f	class:GenVector
ptr	la/matrix.h	/^  const T *ptr() const {$/;"	f	class:GenMatrix
ptr	la/matrix.h	/^  const T *ptr() const {$/;"	f	class:GenVector
ptr	la/matrix.h	/^  const double *ptr() const {$/;"	f	class:SmallMatrix
ptr	la/matrix.h	/^  const double *ptr() const {$/;"	f	class:SmallVector
ptr	la/matrix.h	/^  double *ptr() {$/;"	f	class:SmallMatrix
ptr	la/matrix.h	/^  double *ptr() {$/;"	f	class:SmallVector
ptr_	col/arraylist.h	/^  Elem *ptr_;    \/\/ the stored or aliased array$/;"	m	class:ArrayList
ptr_	col/intmap.h	/^  Value *ptr_;$/;"	m	class:DenseIntMap
ptr_	la/matrix.h	/^  T *ptr_;$/;"	m	class:GenMatrix
ptr_	la/matrix.h	/^  T *ptr_;$/;"	m	class:GenVector
queue_	par/grain.h	/^  GrainQueue<Grain> *queue_;$/;"	m	class:ThreadedGrainRunner
queue_	par/grain.h	/^  MinHeap<double, Grain*> queue_;$/;"	m	class:GrainQueue
radius	tree/bounds.h	/^  double radius() const {$/;"	f	class:DBallBound
radius_	tree/bounds.h	/^  double radius_;$/;"	m	class:DBallBound
ranges	col/rangeset.h	/^  const ArrayList<Range>& ranges() const {$/;"	f	class:RangeSet
ranges_	col/rangeset.h	/^  ArrayList<Range> ranges_;$/;"	m	class:RangeSet
re	base/fortran.h	/^  f77_double re;$/;"	m	struct:__anon15
re	base/fortran.h	/^  f77_real re;$/;"	m	struct:__anon14
ref	la/matrix.h	/^  T &ref(index_t r, index_t c) {$/;"	f	class:GenMatrix
ref	la/matrix.h	/^  double &ref(index_t r, index_t c) {$/;"	f	class:SmallMatrix
right	tree/spacetree.h	/^  BinarySpaceTree *right() const {$/;"	f	class:BinarySpaceTree
right_	tree/spacetree.h	/^  BinarySpaceTree *right_;$/;"	m	class:BinarySpaceTree
root_module_	data/crossvalidation.h	/^  datanode *root_module_;$/;"	m	class:GeneralCrossValidator
root_module_	data/crossvalidation.h	/^  datanode *root_module_;$/;"	m	class:SimpleCrossValidator
runner_	par/grain.h	/^    ThreadedGrainRunner *runner_;$/;"	m	struct:ThreadedGrainRunner::ThreadTask
segfault_on_abort	base/common.c	/^int segfault_on_abort = 0;$/;"	v
set	data/dataset.h	/^  void set(index_t feature, index_t point, double d) {$/;"	f	class:Dataset
set	la/matrix.h	/^  void set(index_t r, index_t c, T v) {$/;"	f	class:GenMatrix
set	la/matrix.h	/^  void set(index_t r, index_t c, double v) {$/;"	f	class:SmallMatrix
set_children	tree/spacetree.h	/^  void set_children(const Dataset& data,$/;"	f	class:BinarySpaceTree
set_name	data/dataset.h	/^  void set_name(const char *name_in) {$/;"	f	class:DatasetInfo
set_radius	tree/bounds.h	/^  void set_radius(double d) {$/;"	f	class:DBallBound
set_top	col/heap.h	/^  void set_top(Value v) {$/;"	f	class:MinHeap
should_free_	la/matrix.h	/^  bool should_free_;$/;"	m	class:GenMatrix
should_free_	la/matrix.h	/^  bool should_free_;$/;"	m	class:GenVector
size	base/otrav_impl.h	/^    size_t size() {$/;"	f	class:ot__private::Deserializer
size	base/otrav_impl.h	/^    size_t size() {$/;"	f	class:ot__private::Freezer
size	base/otrav_impl.h	/^    size_t size() {$/;"	f	class:ot__private::Serializer
size	col/arraylist.h	/^  index_t size() const {$/;"	f	class:ArrayList
size	col/heap.h	/^  index_t size() const {$/;"	f	class:MinHeap
size	col/intmap.h	/^  index_t size() const {$/;"	f	class:DenseIntMap
size	col/rangeset.h	/^  index_t size() const {$/;"	f	class:RangeSet
size	par/grain.h	/^  index_t size() const {$/;"	f	class:GrainQueue
size_	base/otrav_impl.h	/^    size_t size_;$/;"	m	class:ot__private::Deserializer
size_	base/otrav_impl.h	/^    size_t size_;$/;"	m	class:ot__private::Serializer
size_	col/arraylist.h	/^  index_t size_; \/\/ number of active objects$/;"	m	class:ArrayList
size_	col/intmap.h	/^  index_t size_;$/;"	m	class:DenseIntMap
start	fx/stopwatch.h	/^  struct timestamp start;$/;"	m	struct:stopwatch	typeref:struct:stopwatch::timestamp
stat	tree/spacetree.h	/^  Statistic& stat() {$/;"	f	class:BinarySpaceTree
stat	tree/spacetree.h	/^  const Statistic& stat() const {$/;"	f	class:BinarySpaceTree
stat_	tree/spacetree.h	/^  Statistic stat_;$/;"	m	class:BinarySpaceTree
status_	par/thread.h	/^  enum {UNINIT, READY, ATTACHED, DETACHED, DONE} status_;$/;"	m	class:Thread	typeref:enum:Thread::__anon18
stopwatch	fx/stopwatch.h	/^struct stopwatch {$/;"	s
stopwatch_init	fx/stopwatch.c	/^void stopwatch_init(struct stopwatch *timer)$/;"	f
stopwatch_start	fx/stopwatch.c	/^void stopwatch_start(struct stopwatch *timer)$/;"	f
stopwatch_stop	fx/stopwatch.c	/^void stopwatch_stop(struct stopwatch *timer, const struct timestamp *now)$/;"	f
stream_	base/otrav_impl.h	/^    FILE *stream_;$/;"	m	class:ot::StandardFormat
stream_	base/otrav_impl.h	/^    FILE *stream_;$/;"	m	class:ot::XMLFormat
stream_	base/otrav_impl.h	/^    FILE *stream_;$/;"	m	class:ot__private::Deserializer
stream_	base/otrav_impl.h	/^    FILE *stream_;$/;"	m	class:ot__private::Serializer
stride_align	base/compiler.h	293;"	d
stride_align_max	base/compiler.h	307;"	d
strideof	base/compiler.h	266;"	d
strideof	base/compiler.h	281;"	d
submodules	fx/fx.h	/^  const struct fx_submodule_doc *submodules;$/;"	m	struct:fx_module_doc	typeref:struct:fx_module_doc::fx_submodule_doc
success_t	base/common.h	/^} success_t;$/;"	t	typeref:enum:__anon2
tailp_	col/queue.h	/^  Node **tailp_;$/;"	m	class:Queue
task	par/thread.h	/^  Task* task() const {$/;"	f	class:Thread
task_	par/thread.h	/^  Task *task_;$/;"	m	class:Thread
test__void_func	base/test.h	/^typedef void (*test__void_func)();$/;"	t
text	fx/fx.h	/^  const char *text;$/;"	m	struct:fx_entry_doc
text	fx/fx.h	/^  const char *text;$/;"	m	struct:fx_module_doc
text	fx/fx.h	/^  const char *text;$/;"	m	struct:fx_submodule_doc
thread_	par/thread.h	/^  pthread_t thread_;$/;"	m	class:Thread
timestamp	fx/stopwatch.h	/^struct timestamp {$/;"	s
timestamp_add	fx/stopwatch.c	/^void timestamp_add(struct timestamp *dest, const struct timestamp *src)$/;"	f
timestamp_init	fx/stopwatch.c	/^void timestamp_init(struct timestamp *dest)$/;"	f
timestamp_now	fx/stopwatch.c	/^void timestamp_now(struct timestamp *dest)$/;"	f
timestamp_now_rev	fx/stopwatch.c	/^void timestamp_now_rev(struct timestamp *dest)$/;"	f
timestamp_sub	fx/stopwatch.c	/^void timestamp_sub(struct timestamp *dest, const struct timestamp *src)$/;"	f
top	col/heap.h	/^  Value top() const {$/;"	f	class:MinHeap
top	col/queue.h	/^  T& top() {$/;"	f	class:Queue
top	col/queue.h	/^  const T& top() const {$/;"	f	class:Queue
top_key	col/heap.h	/^  Key top_key() const {$/;"	f	class:MinHeap
total	fx/stopwatch.h	/^  struct timestamp total;$/;"	m	struct:stopwatch	typeref:struct:stopwatch::timestamp
tree	tree/kdtree.h	/^namespace tree {$/;"	n
tree_kdtree_private	tree/kdtree_impl.h	/^namespace tree_kdtree_private {$/;"	n
tsc_t	fx/stopwatch.h	/^typedef uint64 tsc_t;$/;"	t
type	data/dataset.h	/^  Type type() const {$/;"	f	class:DatasetFeature
type_	base/otrav_impl.h	/^    const char *type_;$/;"	m	class:ot__private::Printer
type_	data/dataset.h	/^  Type type_;$/;"	m	class:DatasetFeature
unhex_in_place	base/common.c	/^char *unhex_in_place(char *str)$/;"	f
unlikely	base/compiler.h	129;"	d
uselapack	la/uselapack_test.cc	/^TEST_SUITE_BEGIN(uselapack);$/;"	v
uselapack	tree/tree_test.cc	/^TEST_SUITE_BEGIN(uselapack);$/;"	v
val	fx/datanode.h	/^  char *val;$/;"	m	struct:datanode
val	math/math_lib.h	/^  Value val;$/;"	m	class:MinMaxVal
val_type	fx/datanode.h	/^  int val_type;$/;"	m	struct:datanode
val_type	fx/fx.h	/^  fx_val_t val_type;$/;"	m	struct:fx_entry_doc
value	col/heap.h	/^    TValue value;$/;"	m	struct:MinHeap::Entry
value_	par/thread.h	/^  int value_;$/;"	m	class:ValueCondition
value_name	data/dataset.h	/^  const String& value_name(int value) const {$/;"	f	class:DatasetFeature
value_names	data/dataset.h	/^  ArrayList<String>& value_names() {$/;"	f	class:DatasetFeature
value_names_	data/dataset.h	/^  ArrayList<String> value_names_;$/;"	m	class:DatasetFeature
verbosity_level	base/debug.c	/^double verbosity_level = 0.0;$/;"	v
width	math/math_lib.h	/^  double width() const {$/;"	f	struct:DRange
x	base/compiler.h	/^  struct S {T x; char c;};$/;"	m	struct:compiler_strideof::S
zzzLapackInit	la/uselapack.cc	/^    zzzLapackInit() {$/;"	f	struct:la::zzzLapackInit
zzzLapackInit	la/uselapack.cc	/^  struct zzzLapackInit {$/;"	s	namespace:la	file:
~DoneCondition	par/thread.h	/^  ~DoneCondition() {}$/;"	f	class:DoneCondition
~EmptyStatistic	tree/statistic.h	/^  ~EmptyStatistic() {}$/;"	f	class:EmptyStatistic
~GenMatrix	la/matrix.h	/^  ~GenMatrix() {$/;"	f	class:GenMatrix
~GenVector	la/matrix.h	/^  ~GenVector() {$/;"	f	class:GenVector
~GeneralCrossValidator	data/crossvalidation.h	/^  ~GeneralCrossValidator() {}$/;"	f	class:GeneralCrossValidator
~GrainQueue	par/grain.h	/^  ~GrainQueue() {}$/;"	f	class:GrainQueue
~InformDebug	base/cc.cc	/^    ~InformDebug() {$/;"	f	class:cc__private::InformDebug
~Lockable	par/thread.h	/^  ~Lockable() {}$/;"	f	class:Lockable
~Mutex	par/thread.h	/^  ~Mutex() {$/;"	f	class:Mutex
~Queue	col/queue.h	/^  ~Queue() {$/;"	f	class:Queue
~SimpleCrossValidator	data/crossvalidation.h	/^  ~SimpleCrossValidator() {}$/;"	f	class:SimpleCrossValidator
~SmallMatrix	la/matrix.h	/^  ~SmallMatrix() {}$/;"	f	class:SmallMatrix
~SmallVector	la/matrix.h	/^  ~SmallVector() {}$/;"	f	class:SmallVector
~Task	par/task.h	/^  virtual ~Task() {}$/;"	f	class:Task
~TextLineReader	file/textfile.h	/^  ~TextLineReader() {$/;"	f	class:TextLineReader
~TextTokenizer	file/textfile.h	/^  ~TextTokenizer() {$/;"	f	class:TextTokenizer
~TextWriter	file/textfile.h	/^  ~TextWriter() {$/;"	f	class:TextWriter
~Thread	par/thread.h	/^  ~Thread() {$/;"	f	class:Thread
~ThreadedGrainRunner	par/grain.h	/^  ~ThreadedGrainRunner() {}$/;"	f	class:ThreadedGrainRunner
~ValueCondition	par/thread.h	/^  ~ValueCondition() {}$/;"	f	class:ValueCondition
~WaitCondition	par/thread.h	/^  ~WaitCondition() {$/;"	f	class:WaitCondition
